(ns repl.lookup
  (:require
   [clojure.edn :as edn]
   [cognitect.transcriptor :as xr]
   [tutkain.rpc :as rpc]
   [tutkain.lookup :as lookup :refer [lookup]]
   [tutkain.lookup.specs :as specs]))

(def syms
  (mapcat (fn [[alias ns]]
            (map #(vector alias %) (map first (ns-publics ns))))
    (ns-aliases *ns*)))

(map (fn [[alias sym]] (lookup (find-ns 'repl.lookup) (str alias "/" sym))) syms)
(xr/check! ::specs/infos)

(map #(lookup (find-ns 'repl.lookup) (str %)) (map first (ns-refers *ns*)))
(xr/check! ::specs/infos)

(map #(lookup (find-ns 'clojure.main) (str %)) (map first (ns-publics 'clojure.main)))
(xr/check! ::specs/infos)

(lookup (find-ns 'clojure.core) "let")
(xr/check! ::specs/info)

(lookup (find-ns 'clojure.core) ":clojure.core.specs.alpha/binding-form")
(xr/check! ::specs/spec-info)

(require '[clojure.core.specs.alpha :as core.specs])
(lookup (find-ns 'repl.lookup) "::core.specs/local-name")
(xr/check! ::specs/spec-info)

(require '[clojure.spec.alpha :as spec])
(lookup (find-ns 'repl.lookup) "clojure.spec.alpha")
(xr/check! ::specs/ns-info)

(lookup (find-ns 'user) "def")
(xr/check! ::specs/info)

(lookup (find-ns 'nope) "mapcat")
(xr/check! ::specs/info)

(lookup/resolve-file nil)
(xr/check! nil?)

(def public-vars
  (sequence
    (comp
      (mapcat ns-publics)
      (map second))
    (all-ns)))

(xr/check! ::specs/infos
  (distinct (keep #(lookup (-> % .ns ns-name) (-> % .sym name)) public-vars)))

(->
  {:op :lookup
   :dialect :clj
   :ident "mapcat"
   :ns 'user
   :out-fn prn}
  rpc/handle
  with-out-str
  edn/read-string
  :info)

(xr/check! ::specs/info)

(defprotocol MyProtocol
  "protocol docstring"
  (my-method [this] "method docstring"))

(lookup (find-ns 'repl.lookup) "MyProtocol")
(xr/check! ::specs/protocol-info)

(lookup (find-ns 'repl.lookup) "my-method")
(xr/check! ::specs/protocol-method-info)
