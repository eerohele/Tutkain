(ns repl.cljs.completions
  (:require
   [clojure.edn :as edn]
   [clojure.java.io :as io]
   [clojure.set :as set]
   [cognitect.transcriptor :as xr]
   [shadow.cljs.devtools.server :as server]
   [shadow.cljs.devtools.api :as shadow]
   [tutkain.backchannel :as backchannel]
   [tutkain.completions.specs :as specs :refer [prefixed-candidates]]
   [tutkain.cljs :as cljs]))

(def build-id :browser)

;; Start shadow-cljs watch

(xr/on-exit #(server/stop!))
(do (server/start!) (shadow/watch build-id))
(defn env [] (cljs/compiler-env build-id))

;; Touch the file to ensure the keywords in that file are in the compiler
;; environment. Not sure why I need to do this.
(run!
  #(-> (io/file %) (.setLastModified (System/currentTimeMillis)))
  ["dev/src/my/other.cljs" "dev/src/my/app.cljs"])
(Thread/sleep 3000)

(cljs/all-keywords (env))
(xr/check! #(set/subset? #{:my.browser.app/running :my.browser.app/stopped :require} %))

(cljs/ns-candidates (env))
(xr/check! ::specs/completions)

(set (cljs/ns-candidates (env)))
(xr/check! #(set/subset? #{{:candidate "cljs.user" :type :namespace}
                           {:candidate "cljs.pprint" :type :namespace}
                           {:candidate "my.browser.app" :type :namespace}}
              %))

(set (cljs/candidates (env) ":m" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate ":my.browser.app/running" :type :keyword}
                           {:candidate ":my.browser.app/stopped", :type :keyword}} %))

(set (cljs/candidates (env) "::r" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate "::running" :type :keyword}} %))

(set (cljs/candidates (env) ":r" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate ":require" :type :keyword}} %))

;; auto-resolved qualified keywords
(set (cljs/candidates (env) "::other/k" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate "::other/keyword" :type :keyword}} %))

;; scoped candidates
(cljs/candidates (env) "pprint/" 'my.browser.app)
(xr/check! ::specs/completions)

;; namespaces
(cljs/candidates (env) "cljs.s" 'my.browser.app)
(xr/check! ::specs/completions)

;; namespace aliases
(cljs/candidates (env) "pp" 'my.browser.app)
(xr/check! ::specs/completions)

;; core function
(cljs/candidates (env) "ma" 'my.browser.app)
(xr/check! ::specs/completions)

;; core macro
(set (cljs/candidates (env) "unsa" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate "unsafe-bit-and"
                            :type :macro
                            :arglists '("[x y]" "[x y & more]")}} %))

(set (cljs/candidates (env) "st" 'my.browser.app))
(xr/check! #(set/subset? #{{:candidate "start" :type :function :arglists '("([])")}
                           {:candidate "stop" :type :function :arglists '("([])")}} %))

(set (cljs/candidates (env) "write-t" 'cljs.pprint))
(xr/check! #(set/subset? #{{:candidate "write-token" :type :multimethod}} %))

(->
  {:op :completions
   :build-id build-id
   :dialect :cljs
   :prefix "random-u"
   :ns "cljs.user"
   :out-fn prn}
  backchannel/handle
  with-out-str
  edn/read-string
  :completions)

(xr/check! (prefixed-candidates ::specs/symbol-completions "r"))
