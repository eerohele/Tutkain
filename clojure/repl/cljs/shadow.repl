(ns repl.cljs.shadow
  (:refer-clojure :exclude [send])
  (:require
   [clojure.core.server :as server]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [shadow.cljs.devtools.server :as shadow.server]
   [shadow.cljs.devtools.api :as shadow.api]
   [tutkain.socket :as socket]
   [tutkain.shadow :as shadow]))

(spec/def ::tag #{:ret :err :out :tap})
(spec/def ::val string?)
(spec/def ::ns string?)
(spec/def ::ms int?)
(spec/def ::form string?)

(spec/def ::ret
  (spec/keys :opt-un [::tag ::val ::ns ::ms ::form]))

(def build-id :node-script)

;; Start shadow-cljs watch

(xr/on-exit #(shadow.server/stop!))
(do (shadow.server/start!) (shadow.api/watch build-id))
#_(defn env [] (cljs/compiler-env build-id))

(def server-name "shadow")

(xr/on-exit #(server/stop-server server-name))

(def server
  (do
    (server/stop-server server-name)
    (server/start-server
      {:name server-name
       :port 0
       :accept `shadow/rpc
       :args [{:build-id build-id}]})))

(def process
  (->
    (ProcessBuilder. (into-array String ["node" "out/script.js"]))
    .inheritIO
    .start))

(xr/on-exit #(.destroy process))

(Thread/sleep 3000)

(def repl (socket/client :host "localhost" :port (.getLocalPort server)))
(xr/on-exit #((:stop repl)))

(defn recv
  []
  ((:recv repl)))

(defn send
  [message]
  ((:send repl) message))

(def timeout? (partial = ::socket/timeout))

(recv)
(xr/check! ::ret)

;; Smoke
(send {:op :eval :dialect :cljs :code "(inc 1)" :line 1 :column 1 :id 1})
(recv)
(xr/check! #{{:tag :ret :val "2\n" :id 1}
             {:tag :ret :val "2\r\n" :id 1}})

;; Reading auto-resolved keywords
(send {:op :eval :dialect :cljs :code "(ns foo.bar)" :ns 'foo.bar :line 1 :column 1 :id 2})
(recv)
(xr/check! #{{:tag :ret :val "nil\n" :id 2}
             {:tag :ret :val "nil\r\n" :id 2}})

(send
  {:op :eval
   :dialect :cljs
   :code (pr-str (binding [*ns* (create-ns 'foo.bar)] (read-string "::qux")))
   :ns 'foo.bar
   :line 1
   :column 1
   :id 3})

(recv)
(xr/check! #{{:tag :ret :val ":foo.bar/qux\n" :id 3}
             {:tag :ret :val ":foo.bar/qux\r\n" :id 3}})

;; Falling back to printing a string if eval result is not readable
(send
  {:op :eval
   :dialect :cljs
   :code "(ns foo.bar.baz (:import (goog.date DateTime)))"
   :ns 'foo.bar.baz
   :line 1
   :column 1
   :id 4})

(recv)
(xr/check! #{{:tag :ret :val "nil\n" :id 4}
             {:tag :ret :val "nil\r\n" :id 4}})

(send
  {:op :eval
   :dialect :cljs
   :code "(DateTime.)"
   :ns 'foo.bar.baz
   :id 5})

(:val (recv))
(xr/check! (partial re-matches #"#object\[Object \d{8}T\d{6}\]\r?\n"))

;; in-ns (inadequate)

(send
  {:op :eval
   :dialect :cljs
   :code "(ns my.app (:require [clojure.set]))"
   :ns 'my.app
   :id 6})

(recv)

(send
  {:op :eval
   :dialect :cljs
   :code "(defn f [x] x)"
   :ns 'my.app
   :id 7})

(recv)

(send
  {:op :eval
   :dialect :cljs
   :code "(f 1)"
   :ns 'my.app
   :id 8})

(recv)

(xr/check! #{{:tag :ret :val "1\n" :id 8}
             {:tag :ret :val "1\r\n" :id 8}})

;; multiple forms

(send
  {:op :eval
   :dialect :cljs
   :code "(inc 1) (inc 2)"
   :ns 'my.app
   :id 9})

(recv)
(xr/check! #{{:tag :ret :val "[2 3]\n" :id 9}
             {:tag :ret :val "[2 3]\r\n" :id 9}}) ;; FIXME: separate rets?

(send {:op :quit})
(recv)
(xr/check! #{::socket/EOF})
