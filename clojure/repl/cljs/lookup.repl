(ns repl.cljs.lookup
  (:require
   [clojure.edn :as edn]
   [cognitect.transcriptor :as xr]
   [shadow.cljs.devtools.server :as server]
   [shadow.cljs.devtools.api :as shadow]
   [tutkain.backchannel :as backchannel]
   [tutkain.lookup.specs :as specs]
   [tutkain.cljs :as cljs]))

(def build-id :browser)

;; Start shadow-cljs watch

(xr/on-exit #(server/stop!))
(do (server/start!) (shadow/watch build-id))
(defn env [] (cljs/compiler-env build-id))

;; qualified symbols
(cljs/info (env) 'pprint/pprint 'my.browser.app)
(xr/check! ::specs/info)

;; core vars
(cljs/info (env) 'mapcat 'my.browser.app)
(xr/check! ::specs/info)

;; current ns vars
(cljs/info (env) 'start 'my.browser.app)
(xr/check! ::specs/info)

;; special forms
(cljs/info (env) 'def 'my.browser.app)
(xr/check! ::specs/info)

(cljs/info (env) 'cljs.pprint 'my.browser.app)
(xr/check! ::specs/info)

(->
  {:op :lookup
   :build-id build-id
   :dialect :cljs
   :named "mapcat"
   :ns "cljs.user"
   :out-fn prn}
  backchannel/handle
  with-out-str
  edn/read-string
  :info)

(xr/check! ::specs/info)
