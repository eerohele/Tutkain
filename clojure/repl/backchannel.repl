(ns repl.backchannel
  (:refer-clojure :exclude [send])
  (:require
   [clojure.java.io :as io]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.backchannel.test :refer [string->base64]]
   [tutkain.socket :as socket]
   [tutkain.test]))

(def eval-lock (Object.))

(def backchannel (backchannel/open {:port 1337 :xform-in #(assoc % :eval-lock eval-lock)}))

(xr/on-exit #(backchannel/close backchannel))
(def client (socket/client :host "localhost" :port (backchannel/port backchannel)))
(xr/on-exit #((:stop client)))

(defn send
  [message]
  ((:send client) message))

(defn recv
  []
  ((:recv client)))

(send {:op :echo})

(recv)
(xr/check! #{{:op :echo}})

(defmethod backchannel/handle :error
  [_]
  (throw (ex-info "Boom!" {:data :data})))

(spec/def ::tag #{:ret})
(spec/def ::exception? true?)
(spec/def ::val string?)

(spec/def ::ret
  (spec/keys :req-un [::tag ::exception ::val]))

(send {:op :error})
(recv)
(xr/check! ::ret)

;; Backchannel continues to work after handler throws an error
(send {:op :echo})
(recv)

;; Backchannel has access to the same bindings as the REPL thread
(send {:op :test
       :ns "my.test"
       :file "/path/to/my/test.clj"
       :code (string->base64 "(ns my.test (:require [clojure.test :refer [deftest is]]))
(deftest test-assert (is (true? *assert*)))")})

(spec/def ::fail empty?)
(spec/def ::type #{:pass})
(spec/def ::line #{2})
(spec/def ::pass (spec/coll-of (spec/keys :req-un [::type ::line])))

(spec/def ::test-results
  (spec/keys :req-un [::fail ::pass ::error]))

(recv)
(xr/check! ::test-results)

(backchannel/send-to-client backchannel {:tag :out :val "Hello, world!"})
(recv)
(xr/check! #{{:tag :out :val "Hello, world!"}})

;; Resolving a absolute path relative to classpath root

(backchannel/relative-to-classpath-root nil)
(xr/check! #{"NO_SOURCE_PATH"})

(backchannel/relative-to-classpath-root "")
(xr/check! #{"NO_SOURCE_PATH"})

(backchannel/relative-to-classpath-root "/does/not/exist.clj")
(xr/check! #{"/does/not/exist.clj"})

(backchannel/relative-to-classpath-root
  (.getAbsolutePath (io/as-file (io/resource "tutkain/backchannel.cljc"))))

(xr/check! #{"tutkain/backchannel.cljc"})
