(ns repl.backchannel
  (:refer-clojure :exclude [send])
  (:require
   [clojure.edn :as edn]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.socket :as socket])
  (:import
   (java.util.concurrent LinkedBlockingQueue TimeUnit)))

(def recvq (LinkedBlockingQueue.))
(def backchannel (backchannel/open {:port 1337}))
(xr/on-exit #(.close backchannel))
(.setSoTimeout (.socket backchannel) 1000)
(def port (-> backchannel .getLocalAddress .getPort))
(def sendq (socket/client :host "localhost" :port port :recvq recvq))
(xr/on-exit #(.put sendq ::socket/quit))

(defn send
  [message]
  (.put sendq message))

(defn recv
  []
  (-> recvq (.poll 1 TimeUnit/SECONDS) edn/read-string))

(send {:op :echo})

(recv)
(xr/check! #{{:op :echo}})

(defmethod backchannel/handle :error
  [_]
  (throw (ex-info "Boom!" {:data :data})))

(spec/def ::tag #{:ret})
(spec/def ::exception? true?)
(spec/def ::val string?)

(spec/def ::ret
  (spec/keys :req-un [::tag ::exception ::val]))

(send {:op :error})
(recv)
(xr/check! ::ret)

;; Backchannel continues to work after handler throws an error
(send {:op :echo})
(recv)

;; Backchannel has access to the same bindings as the REPL thread
(send {:op :test
       :ns "my.test"
       :file "/path/to/my/test.clj"
       :code "(ns my.test (:require [clojure.test :refer [deftest is]]))
(deftest assert (is (true? *assert*)))"})
(recv)

(send {:op :quit})
(.isOpen backchannel)
(xr/check! false?)
