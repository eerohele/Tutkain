(ns repl.js-analyzer
  (:require
   [clojure.java.io :as io]
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [cljs.env :as env]
   [cognitect.transcriptor :as xr]
   [shadow.cljs.devtools.server :as server]
   [shadow.cljs.devtools.api :as shadow]
   [tutkain.analyzer :as analyzer]
   [tutkain.analyzer.js :as js]
   [tutkain.backchannel.test :refer [send-op string->base64 string->reader]]
   [tutkain.cljs :as cljs]))

(spec/def ::op
  #{:const :map :def :var})

(spec/def ::type
  #{:number :map :keyword :string})

(spec/def ::form
  any?)

(spec/def ::line nat-int?)
(spec/def ::end-line nat-int?)
(spec/def ::column nat-int?)
(spec/def ::end-column nat-int?)

(spec/def ::env
  (spec/keys :opt-un [::line ::end-line ::column ::end-column]))

(spec/def ::node
  (spec/keys
    :req-un [::op]
    :opt-un [::type ::form ::env]))

(spec/def ::position
  (spec/keys :req-un [::line
                      ::form
                      ::column
                      ::end-column]))

(def build-id :browser)

;; Start shadow-cljs watch

(xr/on-exit #(server/stop!))
(do (server/start!) (shadow/watch build-id))
(defn env [] (cljs/compiler-env build-id))

;; Touch the file to ensure the keywords in that file are in the compiler
;; environment. Not sure why I need to do this.
(run!
  #(-> (io/file %) (.setLastModified (System/currentTimeMillis)))
  ["dev/src/my/other.cljs" "dev/src/my/app.cljs"])
(Thread/sleep 3000)

;; Analyze multiple forms
(env/with-compiler-env (env)
  (seq (js/analyze 1 1 (string->reader "1 2"))))

(xr/check! (spec/coll-of ::node :min-count 2))

;; Line and column number
(def nodes
  (env/with-compiler-env (env)
    (set (js/analyze 2 3 (string->reader "(defn f [x] (inc x))")))))

(-> (analyzer/index-by-position nodes) keys set)
(xr/check!
  (partial set/subset? #{{:line 2 :column 12 :end-column 13 :form 'x}
                         {:line 2 :column 20 :end-column 21 :form 'x}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn f [x] (inc x))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset? #{{:form 'x :line 1 :column 10 :end-column 11}
                         {:form 'x :line 1 :column 18 :end-column 19}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   ;; newline doesn't mess up :end-column
   :context (string->base64 "(defn f [x] (doto x\n  inc))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 19
   :end-column 20}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset? #{{:form 'x :line 1 :column 10 :end-column 11}
                         {:form 'x :line 1 :column 19 :end-column 20}}))

(into #{}
  (mapcat
    (fn [[form [column end-column]]]
      (->
        {:op :locals
         :dialect :cljs
         :build-id build-id
         :file "/path/to/my.cljs"
         :ns "cljs.user"
         :context (string->base64 "(defn f [{:keys [x y z]}] (+ x y z))")
         :form form
         :start-line 1
         :start-column 1
         :line 1
         :column column
         :end-column end-column}
        send-op
        :positions)))
  {"x" [18 19] "y" [20 21] "z" [22 23]})

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 18 :form 'x :end-column 19}
      {:line 1 :column 30 :form 'x :end-column 31}
      {:line 1 :column 20 :form 'y :end-column 21}
      {:line 1 :column 32 :form 'y :end-column 33}
      {:line 1 :column 22 :form 'z :end-column 23}
      {:line 1 :column 34 :form 'z :end-column 35}}))

(env/with-compiler-env (env)
  (analyzer/index-by-position
    (js/analyze 1 1
      (string->reader "(defn f [x] (+ x (let [x 2] (inc x)) x))"))))

(xr/check!
  (spec/every-kv ::position simple-symbol? :min-count 5 :max-count 5))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn f [x] (let [x (+ x 1)] (+ x (let [x 2] (inc x)) x)))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 10 :end-column 11 :form 'x}
      {:line 1 :column 24 :end-column 25 :form 'x}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn f [x] (let [x (+ x 1)] (+ x (let [x 2] (inc x)) x)))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 19
   :end-column 20}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 19 :end-column 20 :form 'x}
      {:line 1 :column 33 :end-column 34 :form 'x}
      {:line 1 :column 55 :end-column 56 :form 'x}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn foo [{:keys [bar/baz]}] baz)")
   :form "baz"
   :start-line 1
   :start-column 1
   :line 1
   :column 31
   :end-column 34}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 20 :form 'baz :end-column 27}
      {:line 1 :column 31 :form 'baz :end-column 34}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn foo [{:keys [bar/baz]}] baz)")
   :form "bar/baz"
   :start-line 1
   :start-column 1
   :line 1
   :column 20
   :end-column 27}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 20 :form 'baz :end-column 27}
      {:line 1 :column 31 :form 'baz :end-column 34}}))

(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "cljs.user"
   :context (string->base64 "(defn f [x] (inc x))")
   :form 'x
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions)

(xr/check! (spec/coll-of ::position :min-count 2))

;; *ns* is bound for read
(->
  {:op :locals
   :dialect :cljs
   :build-id build-id
   :file "/path/to/my.cljs"
   :ns "my.browser.app"
   :context (string->base64 "(defn f [x] (::other/keyword x))")
   :form 'x
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 10 :form 'x :end-column 11}
      {:line 1 :column 30 :form 'x :end-column 31}}))
