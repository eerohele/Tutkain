(ns repl.load-blob
  (:require
   [clojure.edn :as edn]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.load-blob])
  (:import
   (clojure.lang LineNumberingPushbackReader)
   (java.io StringReader)
   (java.util Base64)
   (java.util.concurrent LinkedBlockingQueue TimeUnit)))

(spec/def ::tag
  #{:ret :err})

(spec/def ::val
  string?)

(spec/def ::ret
  (spec/keys :req-un [::tag ::val]))

(spec/def ::exception true?)

(spec/def ::ex-ret
  (spec/keys :req-un [::exception]))

(spec/def ::ex
  (spec/merge ::ret ::ex-ret))

(def recvq (LinkedBlockingQueue.))

(defn recv
  []
  (-> recvq (.poll 1 TimeUnit/SECONDS)))

(defn string->reader
  [string]
  (-> string StringReader. LineNumberingPushbackReader.))

(def base64-encoder (Base64/getEncoder))

(defn string->base64
  [string]
  (.encodeToString base64-encoder (.getBytes string)))

(backchannel/handle
  {:op :load
   :file nil
   :code (string->base64 "(defn square [x] (* x x))")
   :out-fn #(.put recvq %)})

(recv)
(xr/check! ::ret)

(backchannel/handle
  {:op :load
   :file "/my/path/math.clj"
   :code (string->base64 "(defn square [x] (* x x))")
   :out-fn #(.put recvq %)})

(recv)
(xr/check! ::ret)

(backchannel/handle
  {:op :load
   :file "/my/path/math.clj"
   :code (string->base64 "(defn square [x] (* x x)") ;; no closing paren
   :out-fn #(.put recvq %)})

(def ex (recv))
(xr/check! ::ex ex)
(xr/check!
  #{#:clojure.error{:phase :read-source
                    :source "/my/path/math.clj"}}
  (-> ex :val edn/read-string :via first :data
    (select-keys [:clojure.error/phase :clojure.error/source])))
