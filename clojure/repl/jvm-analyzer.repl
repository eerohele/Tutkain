(ns repl.jvm-analyzer
  (:require
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.analyzer :as analyzer]
   [tutkain.analyzer.jvm :as jvm]
   [tutkain.rpc.test :refer [send-op string->base64 string->reader]]))

(spec/def ::op
  #{:const :map :def})

(spec/def ::type
  #{:number :map :keyword :string})

(spec/def ::form
  any?)

(spec/def ::line nat-int?)
(spec/def ::end-line nat-int?)
(spec/def ::column nat-int?)
(spec/def ::end-column nat-int?)

(spec/def ::env
  (spec/keys :opt-un [::line ::end-line ::column ::end-column]))

(spec/def ::node
  (spec/keys
    :req-un [::op]
    :opt-un [::type ::form ::env]))

(spec/def ::position
  (spec/keys :req-un [::line
                      ::form
                      ::column
                      ::end-column]))

;; Analyze multiple forms
(seq (jvm/analyze 0 0 (string->reader "1 2")))

(xr/check! (spec/coll-of ::node :min-count 2))

;; Line and column number
(def nodes
  (set (jvm/analyze 1 2 (string->reader "(def x 1)"))))

(xr/check! (spec/coll-of ::node) nodes)
(xr/check! (partial set/subset? #{{:line 1 :column 2 :end-column 11}})
  (set/project (map :env nodes) [:line :column :end-column]))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn f [x] (inc x))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset? #{{:form 'x :line 1 :column 10 :end-column 11}
                         {:form 'x :line 1 :column 18 :end-column 19}}))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   ;; newline doesn't mess up :end-column
   :enclosing-sexp (string->base64 "(defn f [x] (doto x\n  inc))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 19
   :end-column 20}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset? #{{:form 'x :line 1 :column 10 :end-column 11}
                         {:form 'x :line 1 :column 19 :end-column 20}}))

(into #{}
  (mapcat
    (fn [[form [column end-column]]]
      (->
        {:op :locals
         :file "/path/to/my.clj"
         :ns "user"
         :enclosing-sexp (string->base64 "(defn f [{:keys [x y z]}] (+ x y z))")
         :form form
         :start-line 1
         :start-column 1
         :line 1
         :column column
         :end-column end-column}
        send-op
        :positions)))
  {"x" [18 19] "y" [20 21] "z" [22 23]})

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 18 :form 'x :end-column 19}
      {:line 1 :column 30 :form 'x :end-column 31}
      {:line 1 :column 20 :form 'y :end-column 21}
      {:line 1 :column 32 :form 'y :end-column 33}
      {:line 1 :column 22 :form 'z :end-column 23}
      {:line 1 :column 34 :form 'z :end-column 35}}))

(->>
  "(defn f [x] (+ x (let [x 2] (inc x)) x))"
  string->reader
  (jvm/analyze 1 1)
  analyzer/index-by-position)

(xr/check!
  (spec/every-kv ::position simple-symbol? :min-count 5 :max-count 5))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn f [x] (let [x (+ x 1)] (+ x (let [x 2] (inc x)) x)))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 10 :end-column 11 :form 'x}
      {:line 1 :column 24 :end-column 25 :form 'x}}))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn f [x] (let [x (+ x 1)] (+ x (let [x 2] (inc x)) x)))")
   :form "x"
   :start-line 1
   :start-column 1
   :line 1
   :column 19
   :end-column 20}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 19 :end-column 20 :form 'x}
      {:line 1 :column 33 :end-column 34 :form 'x}
      {:line 1 :column 55 :end-column 56 :form 'x}}))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn foo [{:keys [bar/baz]}] baz)")
   :form "baz"
   :start-line 1
   :start-column 1
   :line 1
   :column 31
   :end-column 34}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 20 :form 'baz :end-column 27}
      {:line 1 :column 31 :form 'baz :end-column 34}}))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn foo [{:keys [bar/baz]}] baz)")
   :form "bar/baz"
   :start-line 1
   :start-column 1
   :line 1
   :column 20
   :end-column 27}
  send-op
  :positions
  set)

(xr/check!
  (partial set/subset?
    #{{:line 1 :column 20 :form 'baz :end-column 27}
      {:line 1 :column 31 :form 'baz :end-column 34}}))

(->
  {:op :locals
   :file "/path/to/my.clj"
   :ns "user"
   :enclosing-sexp (string->base64 "(defn f [x] (inc x))")
   :form 'x
   :start-line 1
   :start-column 1
   :line 1
   :column 10
   :end-column 11}
  send-op
  :positions)

(xr/check! (spec/coll-of ::position :min-count 2))
