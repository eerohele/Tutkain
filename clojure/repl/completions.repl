(ns repl.completions
  (:require
   [clojure.edn :as edn]
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [clojure.spec.test.alpha :as test]
   [clojure.test.check :as tc]
   [clojure.test.check.generators :as gen]
   [clojure.test.check.properties :as prop]
   [cognitect.transcriptor :as xr]
   [tutkain.rpc.test :refer [send-op string->base64]]
   [tutkain.completions :as completions :refer [candidates]]
   [tutkain.completions.specs :as specs :refer [prefixed-candidates]]))

;; # Auto-completion

;; An empty string yields an empty result set.
(candidates "" *ns*)
(xr/check! empty?)

;; A prefix that starts with a single colon yields simple keywords.
(candidates ":a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/completions ":a"))

;; A prefix that starts with a double colon yields auto-qualified keywords.
(candidates "::s" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::s"))

;; A prefix that starts with a single colon and contains a forward slash yields
;; auto-qualified keywords where the namespace is a namespace alias of the
;; given namespace.
(candidates "::spec/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::spec"))

(candidates "::spec/k" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::spec/k"))

(candidates "::edn" *ns*)
(xr/check! empty?)

;; A prefix that starts with a single colon and contains a forward slash
;; yields qualified keywords with synthetic namespaces.
:foo/bar
(candidates ":foo/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ":foo"))

(candidates ":foo/b" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ":foo/b"))

;; Yields every loaded keyword.
(spec/def ::pass? #{true})

(tc/quick-check 100
  (prop/for-all [kw gen/keyword]
    (let [prefix (subs (str kw) 0 2)
          completion-set (set (candidates prefix *ns*))]
      (contains? completion-set {:trigger (str kw) :type :keyword}))))

(xr/check! (spec/keys :req-un [::pass?]))

;; A prefix that starts with a valid symbol head yields symbols that start
;; with that head.
(candidates "a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/symbol-completions "a"))

;; A prefix that starts with an alias and contains a forward slash yields
;; candidates in the aliased namespace.
(candidates "spec/" 'clojure.main)
(xr/check! (prefixed-candidates ::specs/symbol-completions "spec"))

;; A prefix that starts with a Java package name yields fully-qualified class
;; candidates from that package.
(xr/check!
  (partial set/subset? #{{:trigger "java.util.ArrayList" :type :class}
                         {:trigger "java.util.Date" :type :class}})
  (set (candidates "java.u" *ns*)))

(candidates "java." *ns*)
(xr/check! (spec/coll-of ::specs/class-completion :min-count 1))

;; A prefix that starts with a Java class name and contains a forward slash
;; yields static method candidates from that class.
(set (candidates "java.time.LocalDate/" *ns*))
(xr/check!
  (partial set/subset? #{{:class "java.time.LocalDate"
                          :trigger "java.time.LocalDate/parse"
                          :type :static-method
                          :arglists ["CharSequence"]
                          :return-type "java.time.LocalDate"}
                         {:trigger "java.time.LocalDate/DAYS_PER_CYCLE" :type :field}}))

;; Yields candidates from every imported Java class.
(def imported-classes (set (map second (mapcat ns-imports (all-ns)))))
(mapcat #(candidates (str (.getName %) "/") *ns*) imported-classes)
(xr/check! (spec/coll-of ::specs/completion :min-count (count imported-classes)))

;; Yields instance method candidates of classes imported into the given
;; namespace.
(candidates ".g" *ns*)
(xr/check! (prefixed-candidates ::specs/method-completions ".g"))

(import '(java.time LocalDate))
(candidates ".atStartOf" *ns*)
(xr/check! (prefixed-candidates ::specs/method-completions ".atStartOfDay"))

;; Yields a candidate for every overload of an instance method.
(set (candidates ".atTime" *ns*))
(xr/check!
  (partial set/subset? #{{:class "java.time.LocalDate"
                          :trigger ".atTime"
                          :arglists ["int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :trigger ".atTime"
                          :arglists ["int" "int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :trigger ".atTime"
                          :arglists ["LocalTime"]
                          :type :method
                          :return-type "java.time.chrono.ChronoLocalDateTime"}
                         {:class "java.time.LocalDate"
                          :trigger ".atTime"
                          :arglists ["int" "int" "int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :trigger ".atTime"
                          :arglists ["OffsetTime"]
                          :type :method
                          :return-type "java.time.OffsetDateTime"}}))

(candidates "java.util.Date/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "java.util.Date/"))

;; A base Java class name prefix yields both top-level and nested class
;; candidates.
(set (candidates "java.util.Spliterator" *ns*))
(xr/check!
  (partial set/subset? #{{:trigger "java.util.Spliterator" :type :class}
                         {:trigger "java.util.Spliterator$OfLong" :type :class}}))

;; A prefix that contains a dollar sign only yields nested class candidates.
(xr/check! ::specs/completions (candidates "java.util.Spliterator$" *ns*))
(candidates "java.util.Spliterator$" *ns*)
(xr/check! (spec/coll-of ::specs/nested-class-completion :kind sequential? :min-count 1))

(candidates "mapcat" 'clojure.core)
(xr/check! ::specs/function-completions)

;; A prefix that starts a non-base Java class name yields a candidate for every
;; class that starts with that class name.
(candidates "clojure.lang" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "clojure.lang"))

;; If a namespace has the same name as an alias in that namespace, Tutkain yields
;; candidates for the aliased namespace.
(binding [*ns* (create-ns 'set)]
  (alias 'set 'clojure.set))

(candidates "set/" 'set)
(xr/check! (partial = (candidates "set/" 'repl.completions)))

(candidates "clojure.lang" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "clojure.lang"))

;; Check that the `candidates` function yields a valid ret for a valid arg.
(spec/fdef completions/candidates
  :args (spec/cat :prefix ::specs/prefix :ns ::specs/ns)
  :ret (spec/coll-of ::specs/completion :kind sequential? :distinct true))

(spec/exercise-fn `completions/candidates)

(->>
  (test/check `completions/candidates)
  (test/summarize-results))

(xr/check! #{{:total 1 :check-passed 1}})

;; Sending the backchannel op works.
(->
  {:op :completions
   :dialect :clj
   :prefix "x"
   :ns "user"}
  send-op
  :completions)

(xr/check! (prefixed-candidates ::specs/symbol-completions "x"))

;; local completions

(defn completions
  [message]
  (->
    (update message :enclosing-sexp string->base64)
    (assoc :op :completions :dialect :clj)
    send-op
    :completions))

;; local not yet in scope
(set
  (completions
    {:prefix "x"
     :ns "user"
     :enclosing-sexp "(let [x 1])"
     :start-line 1
     :start-column 1
     :line 1
     :column 7}))

(xr/check!
  #(not (contains? % {:trigger "x" :type :local})))

;; local in scope
(set
  (completions
    {:prefix "x"
     :ns "user"
     :enclosing-sexp "(let [x 1])"
     :start-line 1
     :start-column 1
     :line 1
     :column 8}))

(xr/check!
  (partial set/subset? #{{:trigger "x" :type :local}}))

;; local no longer in scope
(set
  (completions
    {:prefix "x"
     :ns "user"
     :enclosing-sexp "(let [x 1])"
     :start-line 1
     :start-column 1
     :line 1
     :column 12}))

(xr/check!
  #(not (contains? % {:trigger "x" :type :local})))

;; no line/column info
(set
  (completions
    {:prefix "x"
     :ns "user"
     :enclosing-sexp "(let [x 1])"}))

(xr/check!
  #(not (contains? % {:trigger "x" :type :local})))

(set
  (completions
    {:prefix "x"
     :ns "user"
     :enclosing-sexp "(let [x 1])"
     :start-line 1
     :start-column 1}))

;; syntax error
(send-op
  {:op :completions
   :dialect :clj
   :prefix "x"
   :ns "user"
   :enclosing-sexp "(let [x 1]"
   :start-line 1
   :start-column 1})

(xr/check! #{:err} (:tag *1))

;; ns form completions

;; snippets

(set
  (completions
    {:prefix ":"
     :ns "user"
     :enclosing-sexp "(ns foo.bar )"
     :start-line 1
     :start-column 1
     :line 1
     :column 13}))

(xr/check! (partial set/subset? completions/ns-form-snippets))

;; require

(completions
  {:prefix "clojure."
   :ns "user"
   :enclosing-sexp "(ns foo.bar (:require []))"
   :start-line 1
   :start-column 1
   :line 1
   :column 24})

(xr/check! (prefixed-candidates ::specs/ns-completions "clojure."))

(require '[clojure.main])
(require '[clojure.test])

(set
  (map #(dissoc % :doc)
    (completions
      {:prefix "clojure."
       :ns "user"
       :enclosing-sexp "(ns foo.bar (:require []))"
       :start-line 1
       :start-column 1
       :line 1
       :column 24})))

(xr/check!
  (partial set/subset?
    #{;; normal case
      {:trigger "clojure.main"
       :type :namespace
       :completion "clojure.main ${2::as ${1:main}}$0"
       :completion-format :snippet}
      ;; special case
      {:trigger "clojure.test"
       :type :namespace
       :completion "clojure.test ${5::refer [${1:deftest} ${2:is} ${3:use-fixtures}$4]}$0"
       :completion-format :snippet}}))

;; :require :refer
(->>
  {:prefix "s"
   :ns "user"
   :enclosing-sexp "(ns foo.bar (:require [clojure.set :refer []]))"
   :start-line 1
   :start-column 1
   :line 1
   :column 44}
  (completions)
  (map :trigger)
  (set))

(let [vs (set (filter #(.startsWith % "s") (map name (keys (ns-publics 'clojure.set)))))]
  (xr/check! (partial = vs)))

;; require
(completions
  {:prefix "clojure."
   :ns "user"
   :enclosing-sexp "(require '[])"
   :start-line 1
   :start-column 1
   :line 1
   :column 12})

(xr/check! (prefixed-candidates ::specs/ns-completions "clojure."))

;; :import

(completions
  {:prefix "java.text.spi."
   :ns "user"
   :enclosing-sexp "(ns foo.bar (:import ()))"
   :start-line 1
   :start-column 1
   :line 1
   :column 23})

(xr/check! (prefixed-candidates ::specs/class-completions "java.text.spi."))

;; :import: complete classes in package
(set
  (completions
    {:prefix "B"
     :ns "user"
     :enclosing-sexp "(ns foo.bar (:import (java.text.spi )))"
     :start-line 1
     :start-column 1
     :line 1
     :column 38}))

(xr/check! (partial set/subset? #{{:trigger "BreakIteratorProvider" :type :class}}))

;; import

(completions
  {:prefix "java.util."
   :ns "user"
   :enclosing-sexp "(import '())"
   :start-line 1
   :start-column 1
   :line 1
   :column 11})

(xr/check! (prefixed-candidates ::specs/class-completions "java.util."))

(set
  (completions
    {:prefix "D"
     :ns "user"
     :enclosing-sexp "(import '(java.util ))"
     :start-line 1
     :start-column 1
     :line 1
     :column 21}))

(xr/check! (partial set/subset? #{{:trigger "Date" :type :class}
                                  {:trigger "Deque" :type :class}}))

;; require without braces
(completions
  {:prefix "c"
   :ns "user"
   :enclosing-sexp "(require )"
   :start-line 1
   :start-column 1
   :line 1
   :column 10})

(xr/check!
  (spec/and
    (prefixed-candidates ::specs/ns-completions "c")
    (partial not-any? (comp #{:snippet} :completion-type))))

;; import without parens
(completions
  {:prefix "j"
   :ns "user"
   :enclosing-sexp "(import )"
   :start-line 1
   :start-column 1
   :line 1
   :column 10})

(xr/check!
  (spec/and
    (prefixed-candidates ::specs/class-completions "j")
    (partial not-any? (comp #{:snippet} :completion-type))))

(intern (the-ns 'user) 'NONE)

;; do not propose non-context completions if there are no context completions
(completions
  {:prefix "NONE"
   :ns "user"
   :enclosing-sexp "(require '[])"
   :start-line 1
   :start-column 1
   :line 1
   :column 12})

(xr/check! empty?)
