(ns repl.completions
  (:require
   [clojure.edn :as edn]
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [clojure.spec.test.alpha :as test]
   [clojure.test.check :as tc]
   [clojure.test.check.generators :as gen]
   [clojure.test.check.properties :as prop]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.completions :as completions :refer [candidates]]
   [tutkain.completions.specs :as specs :refer [prefixed-candidates]]))

;; Tests

(candidates "" *ns*)
(xr/check! empty?)

(candidates ":a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/completions ":a"))

(candidates "::s" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::s"))

(candidates "::spec/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::spec/"))

:foo/bar
(candidates ":foo/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ":foo/"))

(spec/def ::pass? #{true})

(tc/quick-check 100
  (prop/for-all [kw gen/keyword]
    (let [prefix (subs (str kw) 0 2)
          completion-set (set (candidates prefix *ns*))]
      (contains? completion-set {:candidate (str kw) :type :keyword}))))

(xr/check! (spec/keys :req-un [::pass?]))

(candidates "a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/symbol-completions "a"))

(candidates "spec/" 'clojure.main)
(xr/check! (prefixed-candidates ::specs/symbol-completions "spec/"))

(def sym-names
  (sequence
    (comp
      (mapcat ns-publics)
      (map (comp str first)))
    (all-ns)))

(def sym-candidates
  (mapcat #(candidates (subs % 0 1) *ns*) sym-names))

(xr/check! (spec/coll-of ::specs/symbol-completion :min-count (count sym-names)) sym-candidates)

(assert (set/subset? #{{:candidate "java.util.ArrayList" :type :class}
                       {:candidate "java.util.Date" :type :class}}
          (set (candidates "java.u" *ns*))))

(assert (not-any? #(.contains (:candidate %) "$") (candidates "java." *ns*)))

(assert (set/subset? #{{:candidate "java.time.LocalDate/parse"
                        :type :static-method
                        :arglists ["CharSequence"]
                        :return-type "LocalDate"}
                       {:candidate "java.time.LocalDate/DAYS_PER_CYCLE" :type :field}}
          (set (candidates "java.time.LocalDate/" *ns*))))

(def imported-classes (set (map second (mapcat ns-imports (all-ns)))))
(mapcat #(candidates (str (.getName %) "/") *ns*) imported-classes)

(xr/check! (spec/coll-of ::specs/completion :min-count (count imported-classes)))

(candidates ".g" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ".g"))

(import '(java.time LocalDate))
(candidates ".atStartOf" *ns*)
(xr/check! (prefixed-candidates ::specs/method-completions ".atStartOfDay"))

(assert (set/subset? #{{:class "LocalDate"
                        :candidate ".atTime"
                        :arglists ["int" "int"]
                        :type :method
                        :return-type "LocalDateTime"}
                       {:class "LocalDate"
                        :candidate ".atTime"
                        :arglists ["int" "int" "int"]
                        :type :method
                        :return-type "LocalDateTime"}
                       {:class "LocalDate"
                        :candidate ".atTime"
                        :arglists ["LocalTime"]
                        :type :method
                        :return-type "ChronoLocalDateTime"}
                       {:class "LocalDate"
                        :candidate ".atTime"
                        :arglists ["int" "int" "int" "int"]
                        :type :method
                        :return-type "LocalDateTime"}
                       {:class "LocalDate"
                        :candidate ".atTime"
                        :arglists ["OffsetTime"]
                        :type :method
                        :return-type "OffsetDateTime"}}
          (set (candidates ".atTime" *ns*))))

;; Constructors in java.lang
(xr/check! (partial set/subset?
             #{{:candidate "String."
                :arglists ["int[]" "int" "int"]
                :return-type "String"
                :type :method}})
  (set (candidates "String" *ns*)))

;; Constructors outside java.lang
(import '(java.net URL))
(xr/check! (partial set/subset?
             #{{:candidate "URL."
                :arglists ["URL" "String"]
                :return-type "URL"
                :type :method}
               {:candidate "URL."
                :arglists ["String"]
                :return-type "URL"
                :type :method}})
  (set (candidates "URL" *ns*)))

(candidates "java.util.Date/" *ns*)
(xr/check! ::specs/completions (candidates "java.util.Spliterator$" *ns*))
(assert (every? #(.contains (:candidate %) "$") (candidates "java.util.Spliterator$" *ns*)))

(xr/check! ::specs/function-completions (filter (comp #{:function} :type) sym-candidates))

(candidates "clojure.lang" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "clojure.lang"))

(spec/fdef completions/candidates
  :args (spec/cat :prefix ::specs/prefix :ns ::specs/ns)
  :ret (spec/coll-of ::specs/completion :kind sequential? :distinct true))

(spec/exercise-fn `completions/candidates)

(->>
  (test/check `completions/candidates)
  (test/summarize-results))

(xr/check! #{{:total 1 :check-passed 1}})

(->
  {:op :completions
   :dialect :clj
   :prefix "x"
   :ns "user"
   :out-fn prn}
  backchannel/handle
  with-out-str
  edn/read-string
  :completions)

(xr/check! (prefixed-candidates ::specs/symbol-completions "x"))
