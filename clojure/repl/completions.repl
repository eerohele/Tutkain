(ns repl.completions
  (:require
   [clojure.edn :as edn]
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [clojure.spec.test.alpha :as test]
   [clojure.test.check :as tc]
   [clojure.test.check.generators :as gen]
   [clojure.test.check.properties :as prop]
   [cognitect.transcriptor :as xr]
   [tutkain.rpc :as rpc]
   [tutkain.completions :as completions :refer [candidates]]
   [tutkain.completions.specs :as specs :refer [prefixed-candidates]]))

;; # Auto-completion

;; An empty string yields an empty result set.
(candidates "" *ns*)
(xr/check! empty?)

;; A prefix that starts with a single colon yields simple keywords.
(candidates ":a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/completions ":a"))

;; A prefix that starts with a double colon yields auto-qualified keywords.
(candidates "::s" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::s"))

;; A prefix that starts with a single colon and contains a forward slash yields
;; auto-qualified keywords where the namespace is a namespace alias of the
;; given namespace.
(candidates "::spec/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::spec"))

(candidates "::spec/k" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "::spec/k"))

(candidates "::edn" *ns*)
(xr/check! empty?)

;; A prefix that starts with a single colon and contains a forward slash
;; yields qualified keywords with synthetic namespaces.
:foo/bar
(candidates ":foo/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ":foo"))

(candidates ":foo/b" *ns*)
(xr/check! (prefixed-candidates ::specs/completions ":foo/b"))

;; Yields every loaded keyword.
(spec/def ::pass? #{true})

(tc/quick-check 100
  (prop/for-all [kw gen/keyword]
    (let [prefix (subs (str kw) 0 2)
          completion-set (set (candidates prefix *ns*))]
      (contains? completion-set {:candidate (str kw) :type :keyword}))))

(xr/check! (spec/keys :req-un [::pass?]))

;; A prefix that starts with a valid symbol head yields symbols that start
;; with that head.
(candidates "a" 'clojure.core)
(xr/check! (prefixed-candidates ::specs/symbol-completions "a"))

;; A prefix that starts with an alias and contains a forward slash yields
;; candidates in the aliased namespace.
(candidates "spec/" 'clojure.main)
(xr/check! (prefixed-candidates ::specs/symbol-completions "spec"))

;; A prefix that starts with a Java package name yields fully-qualified class
;; candidates from that package.
(set (candidates "java.u" *ns*))
(xr/check!
  (partial set/subset? #{{:candidate "java.util.ArrayList" :type :class}
                         {:candidate "java.util.Date" :type :class}}))

(candidates "java." *ns*)
(xr/check! (spec/coll-of ::specs/class-completion :min-count 1))

;; A prefix that starts with a Java class name and contains a forward slash
;; yields static method candidates from that class.
(set (candidates "java.time.LocalDate/" *ns*))
(xr/check!
  (partial set/subset? #{{:class "java.time.LocalDate"
                          :candidate "java.time.LocalDate/parse"
                          :type :static-method
                          :arglists ["CharSequence"]
                          :return-type "java.time.LocalDate"}
                         {:candidate "java.time.LocalDate/DAYS_PER_CYCLE" :type :field}}))

;; Yields candidates from every imported Java class.
(def imported-classes (set (map second (mapcat ns-imports (all-ns)))))
(mapcat #(candidates (str (.getName %) "/") *ns*) imported-classes)
(xr/check! (spec/coll-of ::specs/completion :min-count (count imported-classes)))

;; Yields instance method candidates of classes imported into the given
;; namespace.
(candidates ".g" *ns*)
(xr/check! (prefixed-candidates ::specs/method-completions ".g"))

(import '(java.time LocalDate))
(candidates ".atStartOf" *ns*)
(xr/check! (prefixed-candidates ::specs/method-completions ".atStartOfDay"))

;; Yields a candidate for every overload of an instance method.
(set (candidates ".atTime" *ns*))
(xr/check!
  (partial set/subset? #{{:class "java.time.LocalDate"
                          :candidate ".atTime"
                          :arglists ["int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :candidate ".atTime"
                          :arglists ["int" "int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :candidate ".atTime"
                          :arglists ["LocalTime"]
                          :type :method
                          :return-type "java.time.chrono.ChronoLocalDateTime"}
                         {:class "java.time.LocalDate"
                          :candidate ".atTime"
                          :arglists ["int" "int" "int" "int"]
                          :type :method
                          :return-type "java.time.LocalDateTime"}
                         {:class "java.time.LocalDate"
                          :candidate ".atTime"
                          :arglists ["OffsetTime"]
                          :type :method
                          :return-type "java.time.OffsetDateTime"}}))

(candidates "java.util.Date/" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "java.util.Date/"))

;; A base Java class name prefix yields both top-level and nested class
;; candidates.
(set (candidates "java.util.Spliterator" *ns*))
(xr/check!
  (partial set/subset? #{{:candidate "java.util.Spliterator" :type :class}
                         {:candidate "java.util.Spliterator$OfLong" :type :class}}))

;; A prefix that contains a dollar sign only yields nested class candidates.
(xr/check! ::specs/completions (candidates "java.util.Spliterator$" *ns*))
(candidates "java.util.Spliterator$" *ns*)
(xr/check! (spec/coll-of ::specs/nested-class-completion :kind sequential? :min-count 1))

(candidates "mapcat" 'clojure.core)
(xr/check! ::specs/function-completions)

;; A prefix that starts a non-base Java class name yields a candidate for every
;; class that starts with that class name.
(candidates "clojure.lang" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "clojure.lang"))

;; If a namespace has the same name as an alias in that namespace, Tutkain yields
;; candidates for the aliased namespace.
(binding [*ns* (create-ns 'set)]
  (alias 'set 'clojure.set))

(candidates "set/" 'set)
(xr/check! (partial = (candidates "set/" 'repl.completions)))

(candidates "clojure.lang" *ns*)
(xr/check! (prefixed-candidates ::specs/completions "clojure.lang"))

;; Check that the `candidates` function yields a valid ret for a valid arg.
(spec/fdef completions/candidates
  :args (spec/cat :prefix ::specs/prefix :ns ::specs/ns)
  :ret (spec/coll-of ::specs/completion :kind sequential? :distinct true))

(spec/exercise-fn `completions/candidates)

(->>
  (test/check `completions/candidates)
  (test/summarize-results))

(xr/check! #{{:total 1 :check-passed 1}})

;; Sending the backchannel op works.
(->
  {:op :completions
   :dialect :clj
   :prefix "x"
   :ns 'user
   :out-fn prn}
  rpc/handle
  with-out-str
  edn/read-string
  :completions)

(xr/check! (prefixed-candidates ::specs/symbol-completions "x"))
