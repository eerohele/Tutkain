(ns repl.load-blob
  (:require
   [clojure.edn :as edn]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.backchannel.test :refer [string->base64]]
   [tutkain.load-blob])
  (:import
   (java.util.concurrent LinkedBlockingQueue TimeUnit)))

(spec/def ::tag
  #{:ret :err})

(spec/def ::val
  string?)

(spec/def ::ret
  (spec/keys :req-un [::tag ::val]))

(spec/def ::exception true?)

(spec/def ::ex-ret
  (spec/keys :req-un [::exception]))

(spec/def ::ex
  (spec/merge ::ret ::ex-ret))

(def recvq (LinkedBlockingQueue.))

(defn recv
  []
  (-> recvq (.poll 1 TimeUnit/SECONDS)))

(def eval-context (atom {}))

(backchannel/handle
  {:op :load
   :eval-lock (Object.)
   :eval-context eval-context
   :file nil
   :code (string->base64 "(defn square [x] (* x x))")
   :out-fn #(.put recvq %)})

(recv)
(xr/check! ::ret)

(backchannel/handle
  {:op :load
   :eval-lock (Object.)
   :eval-context eval-context
   :file "/my/path/math.clj"
   :code (string->base64 "(defn square [x] (* x x))")
   :out-fn #(.put recvq %)})

(recv)
(xr/check! ::ret)

(def eval-context (atom {}))

(backchannel/handle
  {:op :load
   :eval-lock (Object.)
   :eval-context eval-context
   :file "/my/path/math.clj"
   :code (string->base64 "(defn square [x] (* x x)") ;; no closing paren
   :out-fn #(.put recvq %)})

(xr/check! (partial instance? Throwable) (get-in @eval-context [:thread-bindings #'*e]))

(def ex (recv))
(xr/check! ::ex ex)
(xr/check!
  #{{:tag :err
     :val
     "Syntax error reading source at (/my/path/math.clj:2:1).\nEOF while reading, starting at line 1\n"
     :exception true}}
  ex)

(def sw (PrintWriter-on #(.put recvq {:tag :err :val %1}) nil))

(backchannel/handle
  {:op :load
   :eval-lock (Object.)
   :eval-context (atom {:thread-bindings {#'*err* sw
                                          #'*warn-on-reflection* true}})
   :file "/my/path/math.clj"
   :code (string->base64 "(def i 23) (.toString i)")
   :out-fn #(.put recvq %)})

(recv)
(xr/check! #{{:tag :err
              :val "Reflection warning, /my/path/math.clj:1:12 - reference to field toString can't be resolved.\n"}})

(recv)
(xr/check! #{{:tag :ret :val "\"23\"\n"}})
