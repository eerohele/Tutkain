(ns repl.query
  (:require
   [clojure.set :as set]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.rpc.test :refer [send-op]]
   [tutkain.lookup.specs :as specs]
   [tutkain.query]))

(spec/def ::result
  (spec/keys
    :req-un [::specs/ns ::specs/name ::specs/type]
    :opt-un [::specs/file ::specs/column ::specs/line ::specs/arglists ::specs/doc]))

(spec/def ::results
  (spec/coll-of ::result :min-count 1 :distinct true))

(->
  {:op :apropos
   :pattern "duplicate"}
  send-op
  :results) ;; string

(xr/check! ::results)

(->
  {:op :apropos
   :pattern ".*dupl.*"}
  send-op
  :results) ;; regexp

(xr/check! ::results)

(->
  {:op :apropos
   :pattern ""}
  send-op
  :results)

(xr/check! empty?)

;; protocols
(->
  {:op :apropos
   :pattern "CollReduce"}
  send-op
  :results)

(xr/check! ::results)
(set (map :type *2))
(xr/check! (partial some #{:protocol}))

;; multimethods
(require 'clojure.inspector)

(->
  {:op :apropos
   :pattern "leaf"}
  send-op
  :results)

(set (map :type *1))
(xr/check! (partial some #{:multimethod}))

(spec/def ::lib-results
  (spec/keys
    :req-un [::specs/name ::specs/type ::specs/file ::specs/column ::specs/line]
    :opt-un [::specs/doc]))

(->
  {:op :loaded-libs
   :dialect :clj}
  send-op
  :results)

(xr/check! (spec/coll-of ::lib-results :min-count 1))

(->
  {:op :dir
   :dialect :clj
   :ns 'clojure.set
   :sym 'union}
  send-op
  :results)

(xr/check! ::results)

(->
  {:op :dir
   :dialect :clj
   :ns 'does.not.exist
   :sym 'none}
  send-op
  :results)

(xr/check! empty?)

;; intern-mappings

(->
  {:op :intern-mappings
   :dialect :clj
   :ns 'does.not.exist}
  send-op
  :results)

(xr/check! empty?)

(->
  {:op :intern-mappings
   :dialect :clj
   :ns 'clojure.set}
  send-op
  :results)

(xr/check! (spec/coll-of ::specs/info :min-count 1))

;; :remove-namespace-mapping

;; Removing a mapping that does not exist does not throw
(send-op
  {:op :remove-namespace-mapping
   :dialect :clj
   :ns (ns-name *ns*)
   :sym 'x})

(def x 1)

(send-op
  {:op :remove-namespace-mapping
   :dialect :clj
   :ns (ns-name *ns*)
   :sym 'x})

(xr/check! false? (contains? (ns-publics *ns*) 'x))

;; alias-mappings

(->
  {:op :alias-mappings
   :dialect :clj
   :ns 'does.not.exist}
  send-op
  :results)

(xr/check! nil?)

(->
  {:op :alias-mappings
   :dialect :clj
   :ns (ns-name *ns*)}
  send-op
  :results
  set)

(xr/check! (partial set/subset? #{{:type :namespace :doc "cognitect.transcriptor" :name 'xr}}))

;; :remove-namespace-alias

;; Removing an alias that does not exist does not throw
(send-op
  {:op :remove-namespace-alias
   :dialect :clj
   :ns (ns-name *ns*)
   :sym 'foo})

(alias 'foo (ns-name *ns*))

(send-op
  {:op :remove-namespace-alias
   :dialect :clj
   :ns (ns-name *ns*)
   :sym 'foo})

(xr/check! false? (contains? (ns-aliases *ns*) 'foo))

;; all-namespaces

(->
  {:op :all-namespaces
   :dialect :clj}
  send-op
  :results)

(xr/check! (spec/coll-of ::specs/ns-info :min-count 1))

;; :remove-namespace

;; Removing a namespace that does not exist does not throw
(send-op
  {:op :remove-namespace
   :dialect :clj
   :ns 'foobar})

(create-ns 'foobar)

(send-op
  {:op :remove-namespace
   :dialect :clj
   :ns 'foobar})

(xr/check! false? (contains? (set (map ns-name (all-ns))) 'foobar))
