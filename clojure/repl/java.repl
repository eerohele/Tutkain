(ns repl.completions
  (:require
   [clojure.edn :as edn]
   [clojure.spec.alpha :as spec]
   [cognitect.transcriptor :as xr]
   [tutkain.backchannel :as backchannel]
   [tutkain.java :as java]))

(spec/def ::line nat-int?)
(spec/def ::column nat-int?)

(spec/def ::name
  (spec/and string? (partial re-matches #".+/.+")))

(spec/def ::file-name string?)

(spec/def ::file string?)

(spec/def ::element
  (spec/keys :opt-un [::file] :req-un [::line ::column ::name ::file-name]))

(spec/def ::stacktrace
  (spec/coll-of ::element :min-count 1))

(java/resolve-stacktrace (Throwable.))
(xr/check! ::stacktrace)

(def eval-context (atom {#'*e (Throwable.)}))

(->
  {:op :resolve-stacktrace
   :out-fn prn
   :eval-context eval-context}
  backchannel/handle
  with-out-str
  edn/read-string
  :stacktrace)

(xr/check! ::stacktrace)
