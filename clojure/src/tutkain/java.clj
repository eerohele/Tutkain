(ns tutkain.java
  (:require
   [clojure.java.io :as io]
   [clojure.repl :as repl])
  (:import
   (java.net URL)))

(defn class-url->source-url
  "Given the URL of an artifact in the classpath providing Java classes, return
  the URL of the JAR that contains the source code of those classes.

  If the URL has the \"jrt\" protocol, attempt a heuristic to figure out the
  path to the ZIP file that contains the JDK source files. Otherwise, assumes
  that the source JAR has been generated by the Maven Source plugin.

  (TODO: Read actual path from artifact POM file?)

  See https://maven.apache.org/plugins/maven-source-plugin/examples/configureplugin.html."
  [^URL url]
  (when (some? url)
    (let [new-url (if (= "jrt" (.getProtocol url))
                    (str "jar:file:" (System/getProperty "java.home") "/lib/src.zip!" (.getFile url))
                    (->
                      (.toString url)
                       ;; Strip nested class part from filename
                      (.replaceAll "\\$.+?\\." "\\.")
                      (.replace ".jar!" "-sources.jar!")))]
      (URL. (.replace new-url ".class" ".java")))))

(defn resolve-stacktrace
  "Given a java.lang.Throwable, return a seq of maps representing its resolved
  stack trace.

  A \"resolved\" stack trace is one where each element of the stack trace has
  an absolute path to the source file of the stack trace element.

  For Java sources, presumes that the Java source files are next to the main
  artifact in the local Maven repository."
  [^Throwable ex]
  (when (instance? Throwable ex)
    (let [cl (.getContextClassLoader (Thread/currentThread))]
      (map (fn [el]
             (let [class-name (.getClassName el)
                   file-name (.getFileName el)
                   java? (.endsWith file-name ".java")
                   url (if java?
                         (class-url->source-url (.getResource cl (str (.replace class-name "." "/") ".class")))
                         (or
                           ;; TODO: This appears to work, but is it right?
                           (.getResource (Class/forName class-name) file-name)
                           (.getResource cl file-name)))]
               {:file (str url)
                :file-name file-name
                :column 1
                :name (if java?
                        (str (.getClassName el) "/" (.getMethodName el))
                        (repl/demunge class-name))
                ;; TODO: Why?
                ;;
                ;; {:file "jar:file:/Users/eerohe/.jabba/jdk/zulu@1.17.0-0/Contents/Home/lib/src.zip!/java.base/java/lang/Thread.java"
                ;;  :file-name "Thread.java"
                ;;  :column: 1
                ;;  :name: "java.lang.Thread/sleep"
                ;;  :line: -2}
                :line (max 0 (.getLineNumber el))}))
        (.getStackTrace ex)))))
