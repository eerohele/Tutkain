; SYNTAX TEST "Packages/Tutkain/EDN (Tutkain).sublime-syntax"
;; CONSTANTS
  nil true false
; ^^^ meta.reader-form.edn constant.language.edn
;     ^^^^ meta.reader-form.edn constant.language.edn
;          ^^^^^ meta.reader-form.edn constant.language.edn
  Nil
; ^^^ -constant.language.edn


;; STRINGS
  "abcde"
; ^^^^^^^ string.quoted.double.edn
; ^       punctuation.definition.string.begin.edn
;       ^ punctuation.definition.string.end.edn
;        ^ -string.quoted.double.edn
  ""
; ^^ string.quoted.double.edn
; ^  punctuation.definition.string.begin.edn
;  ^ punctuation.definition.string.end.edn
;   ^ -string.quoted.double.edn
  "([{)]} ;"
; ^^^^^^^^^^ string.quoted.double.edn
  "multi
; ^       punctuation.definition.string.begin.edn
; ^^^^^^  string.quoted.double.edn
  line
; ^^^^    string.quoted.double.edn
string"
; ^^^^^   string.quoted.double.edn
;     ^   punctuation.definition.string.end.edn
;; ESCAPES
  "\" \\ \' \r \n \b \t \f \377 \u221e \u221E"
;  ^^ constant.character.escape.edn
;  ^  punctuation.definition.character.escape.begin.edn
;    ^ -constant.character.escape.edn
;     ^^ constant.character.escape.edn
;        ^^ constant.character.escape.edn
;           ^^ constant.character.escape.edn
;              ^^ constant.character.escape.edn
;                 ^^ constant.character.escape.edn
;                    ^^ constant.character.escape.edn
;                       ^^ constant.character.escape.edn
;                          ^^^^ constant.character.escape.edn
;                               ^^^^^^ constant.character.escape.edn
;                                      ^^^^^^ constant.character.escape.edn
;; INCORRECT STRINGS
  "\x \888 \u000 \u000g"
;  ^^ constant.character.escape.edn & invalid.illegal.escape.string.edn
;  ^  punctuation.definition.character.escape.begin.edn
;    ^ -constant.character.escape.edn
;     ^^ constant.character.escape.edn & invalid.illegal.escape.string.edn
;          ^^ constant.character.escape.edn & invalid.illegal.escape.string.edn
;                ^^ constant.character.escape.edn & invalid.illegal.escape.string.edn


;; CHARACTERS
  \c \newline \u221E \u221e \o3 \o50 \o377
; ^  punctuation.definition.character.begin.edn
; ^^ constant.character.edn
;   ^ -constant.character.edn
;    ^^^^^^^^ constant.character.edn
;             ^^^^^^ constant.character.edn
;                    ^^^^^^ constant.character.edn
;                           ^^^ constant.character.edn
;                               ^^^^ constant.character.edn
;                                    ^^^^^ constant.character.edn
  \\ \] \) \} \" \' \; \,
; ^^ constant.character.edn
;    ^^ constant.character.edn
;       ^^ constant.character.edn
;          ^^ constant.character.edn
;             ^^ constant.character.edn
;                ^^ constant.character.edn
;                   ^^ constant.character.edn
;                      ^^ constant.character.edn
;; NOT CHARACTERS
  \aa \u11 \o378 \
; ^^ constant.character.edn & invalid.illegal.character.edn
; ^  punctuation.definition.character.begin.edn
;     ^^^^ constant.character.edn & invalid.illegal.character.edn
;          ^^^^^ constant.character.edn & invalid.illegal.character.edn
;                ^ constant.character.edn & invalid.illegal.character.edn
  a\b
; ^^^ -constant.character.edn


;; COMMENTS
  ; single semicolon
; ^^^^^^^^^^^^^^^^^^ comment.line.edn
; ^                  punctuation.definition.comment.edn
;  ^^^^^^^^^^^^^^^^^ -punctuation.definition.comment.edn
  "abc" ; after something
;       ^^^^^^^^^^^^^^^^^ comment.line.edn
;       ^                 punctuation.definition.comment.edn
  #_(abc) #_[123] #_xyz
; ^^ comment.block.edn & punctuation.definition.comment.edn
;         ^^ comment.block.edn & punctuation.definition.comment.edn
;                 ^^ comment.block.edn & punctuation.definition.comment.edn


;; SYMBOLS
  a abc абв
; ^ meta.symbol.edn,
;  ^ -meta.symbol.edn
;   ^^^ meta.symbol.edn
;       ^^^ meta.symbol.edn
  . * + ! - _ ? $ % & = < > /
; ^ meta.symbol.edn
;   ^ meta.symbol.edn
;     ^ meta.symbol.edn
;       ^ meta.symbol.edn
;         ^ meta.symbol.edn
;           ^ meta.symbol.edn
;             ^ meta.symbol.edn
;               ^ meta.symbol.edn
;                 ^ meta.symbol.edn
;                   ^ meta.symbol.edn
;                     ^ meta.symbol.edn
;                       ^ meta.symbol.edn
;                         ^ meta.symbol.edn
;                           ^ meta.symbol.edn
  a1 a: a# a' -a +a .a k::v a/
; ^^ meta.symbol.edn
;    ^^ meta.symbol.edn
;       ^^ meta.symbol.edn
;          ^^ meta.symbol.edn
;             ^^ meta.symbol.edn
;                ^^ meta.symbol.edn
;                   ^^ meta.symbol.edn
;                      ^^^^ meta.symbol.edn
;                           ^ meta.symbol.edn
;                            ^ punctuation.accessor.edn
  a/b a1/b2 абв/где abc.def/uvw.xyz clojure.core//
; ^^^ meta.symbol.edn
;  ^  punctuation.accessor.edn
;     ^^^^^ meta.symbol.edn
;       ^ punctuation.accessor.edn
;           ^^^^^^^ meta.symbol.edn
;              ^ punctuation.accessor.edn
;                   ^^^^^^^^^^^^^^^ meta.symbol.edn
;                          ^ punctuation.accessor.edn
;                                   ^^^^^^^^^^^^^^ meta.symbol.edn
;                                               ^ punctuation.accessor.edn
; NOT SYMBOLS
  /b 1a -1a +1a 'a
; ^^^^^^^^^^^^^^^^^^^^^^^ -meta.symbol.edn

;; KEYWORDS
  :a :abc :абв
; ^^ constant.other.keyword.unqualified.edn
; ^  punctuation.definition.keyword.edn
;  ^ -punctuation.definition.keyword.edn
;   ^ -constant.other.keyword.unqualified.edn
;    ^^^^ constant.other.keyword.unqualified.edn
;         ^^^^ constant.other.keyword.unqualified.edn
  :. :* :+ :! :- :_ :? :$ :% :& := :< :> :# :1 :' :a: :k::v
; ^^ constant.other.keyword.unqualified.edn
;    ^^ constant.other.keyword.unqualified.edn
;       ^^ constant.other.keyword.unqualified.edn
;          ^^ constant.other.keyword.unqualified.edn
;             ^^ constant.other.keyword.unqualified.edn
;                ^^ constant.other.keyword.unqualified.edn
;                   ^^ constant.other.keyword.unqualified.edn
;                      ^^ constant.other.keyword.unqualified.edn
;                         ^^ constant.other.keyword.unqualified.edn
;                            ^^ constant.other.keyword.unqualified.edn
;                               ^^ constant.other.keyword.unqualified.edn
;                                  ^^ constant.other.keyword.unqualified.edn
;                                     ^^ constant.other.keyword.unqualified.edn
;                                        ^^ constant.other.keyword.unqualified.edn
;                                           ^^ constant.other.keyword.unqualified.edn
;                                              ^^ constant.other.keyword.unqualified.edn
;                                                 ^^^ constant.other.keyword.unqualified.edn
;                                                     ^^^^^ constant.other.keyword.unqualified.edn
  :a/b :1/2 :абв/где :abc.def/uvw.xyz :kv/
; ^^^^ constant.other.keyword.qualified.edn
; ^    punctuation.definition.keyword.edn
;   ^  punctuation.definition.constant.namespace.edn
;     ^ -constant.other.keyword.qualified.edn
;      ^^^^ constant.other.keyword.qualified.edn
;        ^ punctuation.definition.constant.namespace.edn
;           ^^^^^^^^ constant.other.keyword.qualified.edn
;               ^ punctuation.definition.constant.namespace.edn
;                    ^^^^^^^^^^^^^^^^ constant.other.keyword.qualified.edn
;                            ^ punctuation.definition.constant.namespace.edn
;                                     ^ punctuation.definition.keyword.edn
;                                        ^ punctuation.definition.constant.namespace.edn
;                                     ^^^^ constant.other.keyword.qualified.edn
;; NOT KEYWORDS
  ::kv :::kv
; ^^^^^^^^^^ -constant.other.keyword

;; :/kv is technically not a keyword, but coming up with a regex for that
;; shit gets way too difficult.

;; INTEGERS
  0 1 23 1234567890 -0 +0 0N
; ^ constant.numeric.integer.decimal.edn
;  ^ -constant.numeric.integer.decimal.edn
;   ^ constant.numeric.integer.decimal.edn
;     ^^ constant.numeric.integer.decimal.edn
;        ^^^^^^^^^^ constant.numeric.integer.decimal.edn
;                   ^^ constant.numeric.integer.decimal.edn
;                      ^^ constant.numeric.integer.decimal.edn
;                         ^^ constant.numeric.integer.decimal.edn
;                          ^ storage.type.numeric.edn
;; NOT INTEGERS
  01 1n ++1 --1 +N -N
; ^^^^^^^^^^^^^^^^^^^ -constant.numeric.integer.decimal.edn

;; FLOATS
  0.0 0.000 999.999 1. 0e1 2e+3 4e-5 67E89 1.2e3 444.555E+666 1.e3
; ^^^ constant.numeric.float.decimal.edn
;    ^ -constant.numeric.float.decimal.edn
;     ^^^^^ constant.numeric.float.decimal.edn
;           ^^^^^^^ constant.numeric.float.decimal.edn
;                   ^^ constant.numeric.float.decimal.edn
;                      ^^^ constant.numeric.float.decimal.edn
;                          ^^^^ constant.numeric.float.decimal.edn
;                               ^^^^ constant.numeric.float.decimal.edn
;                                    ^^^^^ constant.numeric.float.decimal.edn
;                                          ^^^^^ constant.numeric.float.decimal.edn
;                                                ^^^^^^^^^^^^ constant.numeric.float.decimal.edn
;                                                             ^^^^ constant.numeric.float.decimal.edn
  0M 123M 4.M 5e6M 7.8e9M -3.14 +2e19M
; ^^ constant.numeric.float.decimal.edn
;  ^ storage.type.numeric.edn
;    ^^^^ constant.numeric.float.decimal.edn
;       ^ storage.type.numeric.edn
;         ^^^ constant.numeric.float.decimal.edn
;           ^ storage.type.numeric.edn
;             ^^^^ constant.numeric.float.decimal.edn
;                ^ storage.type.numeric.edn
;                  ^^^^^^ constant.numeric.float.decimal.edn
;                       ^ storage.type.numeric.edn
;                         ^^^^^ constant.numeric.float.decimal.edn
;                               ^^^^^^ constant.numeric.float.decimal.edn
;                                    ^ storage.type.numeric.edn
  ##Inf ##-Inf ##NaN
; ^^ keyword.operator.macro.edn
;   ^^^ constant.other.symbolic.edn
;         ^^^^ constant.other.symbolic.edn
;                ^^^ constant.other.symbolic.edn
;; NOT FLOATS
  00.0 1e2.3 1e 1.0e --1.0 ++1.0 +M -M 1m ###Inf ##inf ##+Inf
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -constant.numeric.float.decimal.edn


;; RATIOS
  1/2 0/2 999/999 +1/2 -1/2
; ^^^ constant.numeric.rational.decimal.edn
;    ^ -constant.numeric.rational.decimal.edn
;     ^^^ constant.numeric.rational.decimal.edn
;         ^^^^^^^ constant.numeric.rational.decimal.edn
;                 ^^^^ constant.numeric.rational.decimal.edn
;                      ^^^^ constant.numeric.rational.decimal.edn


;; TAGS
  #inst "1985-01-25"
; ^^^^^^^^^^^^^^^^^^ constant.other.instant.edn
;                   ^ -constant.other.instant.edn
  #inst"2018-03-28T10:48:00.000"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn
  #inst   "2018-03-28T10:48:00.000Z"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn
  #inst "2018-03-28T10:48:00.000+01:30"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn
  #inst "2018-12-31T23:59:60.999999999-23:59"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn
  #uuid "c5634984-363d-4727-B8CE-b06ab1253c81"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.uuid.edn
  #datascript/DB {:schema {}, :datoms {}}
; ^^^^^^^^^^^^^^ meta.reader-form.edn keyword.operator.macro.edn
;            ^ punctuation.definition.symbol.namespace.edn
;               ^ -meta.reader-form.edn
;; NOT TAGS
  #inst "1985-"
; ^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-20"
; ^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-40"
; ^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-31T30"
; ^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-31T23:60"
; ^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-31T23:59:70"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-31T23:59:60.999+30:00"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #inst "1985-12-31T23:59:60.999+12:60"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.instant.edn & invalid.illegal.instant.edn
  #uuid "abc"
; ^^^^^^^^^^^ constant.other.uuid.edn & invalid.illegal.uuid.edn
  #uuid "g5634984-363d-4727-b8ce-b06ab1253c81"
; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant.other.uuid.edn & invalid.illegal.uuid.edn
  #123 #a/ #_tag #{} ##Inf
; ^^^^^^^^^^^^^^^^^^^^^^^^ -storage.type.tag.edn

;; punctuation
  ,
; ^ comment.punctuation.comma.edn
;  ^ -punctuation
  " "
; ^ punctuation.definition.string.begin.edn
;  ^ -punctuation
;   ^ punctuation.definition.string.end.edn
  ( )
; ^ punctuation.section.parens.begin.edn
;   ^ punctuation.section.parens.end.edn
  [ ]
; ^ punctuation.section.brackets.begin.edn
;   ^ punctuation.section.brackets.end.edn
  { }
; ^ punctuation.section.braces.begin.edn
;   ^ punctuation.section.braces.end.edn
  #{ }
; ^ keyword.operator.macro
;  ^ punctuation.section.braces.begin.edn
;    ^ punctuation.section.braces.end.edn
  ; ...
; ^ punctuation.definition.comment.edn
;  ^ -punctuation

;; BALANCING
  []]
; ^^ -invalid.illegal.stray-bracket-end
;   ^ invalid.illegal.stray-bracket-end
  {}}}
; ^^ -invalid.illegal.stray-bracket-end
;   ^^ invalid.illegal.stray-bracket-end
  ())))
; ^^ -invalid.illegal.stray-bracket-end
;   ^^^ invalid.illegal.stray-bracket-end
  ([)]))   {[(}])]}   #{{)]}}}
;   ^    invalid.illegal.stray-bracket-end
;      ^ invalid.illegal.stray-bracket-end
;             ^^ invalid.illegal.stray-bracket-end
;                        ^^ invalid.illegal.stray-bracket-end
;                            ^ invalid.illegal.stray-bracket-end
  {(["abc])}"])}
; ^^^^^^^^^^^^^^ -invalid.illegal.stray-bracket-end
  {[()]} ;; )]}
; ^^^^^^^^^^^^^ -invalid.illegal.stray-bracket-end

;; SEXP
   ( )
; ^ -meta.sexp.list.edn
;  ^ punctuation.section.parens.begin.edn
;   ^ meta.sexp.list.edn
;    ^ punctuation.section.parens.end.edn
;     ^ -meta.sexp.list.edn
  (foo/bar (baz/quux 1))
; ^ punctuation.section.parens.begin.edn
; ^^^^^^^^^^^^^^^^^^^^^^ meta.sexp.list.edn
;          ^ punctuation.section.parens.begin.edn
;          ^^^^^^^^^^^^ meta.sexp.list.edn meta.sexp.list.edn
;                     ^ punctuation.section.parens.end.edn
;                      ^ punctuation.section.parens.end.edn
;                       ^ -meta.sexp.list.edn
   [ ]
; ^ -meta.sexp.vector.edn
;  ^ punctuation.section.brackets.begin.edn
;  ^^^ meta.sexp.vector.edn
;    ^ punctuation.section.brackets.end.edn
;     ^ -meta.sexp.vector.edn
  [1 [2] 3]
; ^ punctuation.section.brackets.begin.edn
; ^^^^^^^^^ meta.sexp.vector.edn
;    ^ punctuation.section.brackets.begin.edn
;    ^^^ meta.sexp.vector.edn meta.sexp.vector.edn
;      ^ punctuation.section.brackets.end.edn
;         ^ punctuation.section.brackets.end.edn
;          ^ -meta.sexp.vector.edn
   { }
; ^ -meta.sexp.map.edn
;  ^ punctuation.section.braces.begin.edn
;  ^^^ meta.sexp.map.edn
;    ^ punctuation.section.braces.end.edn
;     ^ -meta.sexp.map.edn
  {:a {:b 2} :c 3}
; ^ punctuation.section.braces.begin.edn
; ^^^^^^^^^^^^^^^^ meta.sexp.map.edn
;     ^ punctuation.section.braces.begin.edn
;     ^^^^^^ meta.sexp.map.edn meta.sexp.map.edn
;          ^ punctuation.section.braces.end.edn
;                ^ punctuation.section.braces.end.edn
;                 ^ -meta.sexp.map.edn
   #{ }
; ^ -meta.sexp.set.edn
;  ^ keyword.operator.macro.edn
;   ^ punctuation.section.braces.begin.edn
;  ^^^^ meta.sexp.set.edn
;     ^ punctuation.section.braces.end.edn
;      ^ -meta.sexp.set.edn
  #{1 #{2} 3}
; ^ keyword.operator.macro.edn
;  ^ punctuation.section.braces.begin.edn
; ^^^^^^^^^^^ meta.sexp.set.edn
;     ^ keyword.operator.macro.edn
;      ^ punctuation.section.braces.begin.edn
;     ^^^^ meta.sexp.set.edn meta.sexp.set.edn
;        ^ punctuation.section.braces.end.edn
;           ^ punctuation.section.braces.end.edn
;            ^ -meta.sexp.set.edn

  {,}
;  ^ comment.punctuation.comma.edn

  {:a}
;  ^^ meta.mapping.key.edn
;    ^^ -meta.mapping

  {:a 1}
;  ^^ meta.mapping.key.edn
;    ^ -meta.mapping
;     ^ meta.sexp.map.edn meta.mapping.value.edn

  {:a ,}
;  ^^ meta.mapping.key.edn
;    ^^ -meta.mapping
;     ^ comment.punctuation.comma.edn

  {:a 1,}
;  ^^ meta.mapping.key.edn
;    ^ -meta.mapping
;     ^ meta.sexp.map.edn meta.mapping.value.edn
;      ^ -meta.mapping

  {:a {:b 2} :c 3}
;  ^^ meta.mapping.key.edn
;    ^ -meta.mapping
;     ^^^^^^ meta.mapping.value.edn
;      ^^ meta.mapping.value.edn meta.mapping.key.edn
;        ^ -meta.mapping.key
;         ^ meta.mapping.value.edn meta.mapping.value.edn
;          ^ -(meta.mapping.value.edn meta.mapping.value.edn)
;           ^ -meta.mapping
;            ^^ meta.mapping.key.edn
;              ^ -meta.mapping.key
;               ^ meta.mapping.value.edn
;                ^^ -meta.mapping
