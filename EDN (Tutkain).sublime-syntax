%YAML 1.2
---
# Parts of this syntax definition are based on the original Clojure syntax
# definition bundled with Sublime Text, distributed under this license:
#
#     Permission to copy, use, modify, sell and distribute this
#     software is granted. This software is provided "as is" without
#     express or implied warranty, and with no claim as to its
#     suitability for any purpose.
#
# Parts of this syntax definition are based on the EDN and ClojureC syntax
# definitions[1] in what is now known as the Clojure Sublimed package licensed
# under the MIT license, copyright (c) 2018 Nikita Prokopov:
#
# [1]: https://github.com/tonsky/Clojure-Sublimed/tree/c781793d87e0ebfe30ff9d162779abfe3c8a8a91

# https://www.sublimetext.com/docs/syntax.html
name: EDN (Tutkain)
file_extensions: [edn]
scope: source.edn

variables:
  whitespace: '(?:\s|(,))*'
  end_chars: '\s,()\[\]{}";'
  end: '(?=$|[{{end_chars}}])'
  number_end: '(?=$|[{{end_chars}}''`#])'
  non_symbol_chars: \s,;\(\)\[\]{}\"`~@\^\\\/
  symbol_head: '(?:\+(?!\d)|-(?!\d)|\.|[^{{non_symbol_chars}}:#''\d+-\.])'
  symbol: '(?:/|{{symbol_head}}[^{{non_symbol_chars}}]*)'
  qualified_symbol: '(?:/|{{symbol}}|({{symbol}})(/)({{symbol}})*){{end}}'
  keyword_namespace: '[^{{non_symbol_chars}}:/]*'
  keyword: '[[^{{non_symbol_chars}}:]|/][[^{{non_symbol_chars}}:]/:]*'
  constant: '(nil|true|false){{end}}'
  sign: '[-+]?'
  exponent: (?:[eE]{{sign}}\d+)

contexts:
  prototype:
    - include: comma
    - include: comment

  main:
    - include: stray-brackets
    - include: forms

  # https://clojure.org/reference/reader
  forms:
    - include: constant
    - include: literal
    - include: macro-characters
    - include: sexp
    - include: symbol
    - include: fallback

  # Constants

  constant:
    - match: '{{constant}}'
      scope: meta.reader-form.edn constant.language.edn

  # Literals

  literal:
    - include: string
    - include: numbers
    - include: symbolic
    - include: keywords

  # Symbols

  symbol:
    - match: '{{qualified_symbol}}'
      scope: meta.reader-form.edn meta.symbol.edn
      captures:
        1: meta.namespace.edn
        2: punctuation.accessor.edn

  # Literals

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.edn
      push:
      - meta_include_prototype: false
      - meta_scope: meta.reader-form.edn string.quoted.double.edn
      - match: '(\\)(u\h{4}|b|t|n|f|r|"|''|\\|[0-3]?[0-7]{1,2})|((\\).)'
        scope: constant.character.escape.edn
        captures:
          1: punctuation.definition.character.escape.begin.edn
          3: invalid.illegal.escape.string.edn
          4: punctuation.definition.character.escape.begin.edn
      - match: '"'
        scope: punctuation.definition.string.end.edn
        pop: true

  numbers:
    - include: deprecated
    - include: integer-with-radix
    - include: hex-integer
    - include: decimal-integer
    - include: float
    - include: ratio

  deprecated:
    - match: '[-+]?0\d+N?{{number_end}}'
      scope: meta.reader-form.edn invalid.deprecated.edn
      pop: true

  integer-with-radix:
    - match: '([-+]?)((?:[2-9]|[1-9]\d+)[Rr])[0-9A-Za-z]+{{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.other.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.definition.numeric.base.edn

  hex-integer:
    - match: '({{sign}})(0[Xx])\h+(N?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.hexadecimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.definition.numeric.base.edn
        3: storage.type.numeric.edn

  decimal-integer:
    - match: '({{sign}})\d+(N?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: storage.type.numeric.edn

  float:
    - match: '({{sign}})(?:0|[1-9][0-9]*)(?:(M)|(\.)[0-9]*(M)?|[eE][+-]?[0-9]+(M)?|(\.)[0-9]*[eE][+-]?[0-9]+(M)?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.float.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: storage.type.numeric.edn
        3: punctuation.separator.decimal.edn
        4: storage.type.numeric.edn
        5: storage.type.numeric.edn
        6: punctuation.separator.decimal.edn
        7: storage.type.numeric.edn

  ratio:
    - match: '({{sign}})\d+(/)\d+{{number_end}}'
      scope: meta.reader-form.edn constant.numeric.rational.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.separator.rational.edn

  symbolic:
    - match: '((##)(Inf)|(##)(-Inf)|(##)(NaN))'
      captures:
        1: meta.reader-form.edn
        2: keyword.operator.macro.edn
        3: constant.other.symbolic.edn
        4: keyword.operator.macro.edn
        5: constant.other.symbolic.edn
        6: keyword.operator.macro.edn
        7: constant.other.symbolic.edn

  keywords:
    - include: qualified-keyword
    - include: unqualified-keyword
    - include: colon

  colon:
    - match: '(:){{end}}'
      scope: invalid.illegal.token

  qualified-keyword:
    - match: '(:)([^{{non_symbol_chars}}:]*)(/)({{keyword}})?{{end}}'
      scope: meta.reader-form.edn constant.other.keyword.qualified.edn
      captures:
        1: punctuation.definition.keyword.edn
        2: meta.namespace.edn
        3: punctuation.accessor.edn punctuation.definition.constant.namespace.edn

  unqualified-keyword:
    - match: '(:)(?:/|[^{{non_symbol_chars}}:][[^{{non_symbol_chars}}:]:]*)(?=$|[{{end_chars}}''`#])'
      scope: meta.reader-form.edn constant.other.keyword.unqualified.edn
      captures:
        1: punctuation.definition.keyword.edn

  # Macro characters

  macro-characters:
    - include: character
    - include: dispatch

  character:
    - match: '(?<=^|[\s,()\[\]{}"]|#_)((\\)(u\h{4}|o[0-3]?[0-7]{1,2}|newline|tab|space|backspace|formfeed|return|[^\s]){{end}}|((\\)[^\s,()\[\]{}";]*))'
      scope: meta.reader-form.edn constant.character.edn
      captures:
        2: punctuation.definition.character.begin.edn
        4: invalid.illegal.character.edn
        5: punctuation.definition.character.begin.edn

  comment:
    - match: '(;+|#!)(.|\s)*'
      scope: comment.line.edn
      captures:
        1: punctuation.definition.comment.edn

  dispatch:
    - include: discard
    - include: tagged-element
    - include: qualified-map

  # Dispatch

  discard:
    - match: '((#)_)'
      captures:
        1: punctuation.definition.comment.edn
        2: keyword.operator.macro.edn
      push:
        - meta_scope: comment.block.edn comment.discard.edn
        - include: forms
        - match: ''
          pop: true

  tagged-element:
    - match: '((#\s*inst)\s*((")\d\d\d\d(?:-[01]\d(?:-[0123]\d(?:T[012]\d(?::[012345]\d(?::[0123456]\d(?:[.]\d{1,9})?)?)?)?)?)?(?:Z|[-+][012]\d:[012345]\d)?("))|(#inst\s*"[^"]*")){{end}}'
      scope: meta.reader-form.edn meta.tagged-element.edn constant.other.instant.edn
      captures:
        2: keyword.operator.macro.edn meta.tagged-element.tag.edn
        3: string.quoted.double.edn meta.tagged-element.element.edn
        4: punctuation.definition.string.begin.edn
        5: punctuation.definition.string.end.edn
        6: invalid.illegal.instant.edn
    - match: '((#\s*uuid)\s*((")\h{8}-\h{4}-\h{4}-\h{4}-\h{12}("))|(#uuid\s*"[^"]*")){{end}}'
      scope: meta.reader-form.edn meta.tagged-element.edn constant.other.uuid.edn
      captures:
        2: keyword.operator.macro.edn meta.tagged-element.tag.edn
        3: string.quoted.double.edn meta.tagged-element.element.edn
        4: punctuation.definition.string.begin.edn
        5: punctuation.definition.string.end.edn
        6: invalid.illegal.uuid.edn
    - match: '(#{{qualified_symbol}})'
      scope: meta.tagged-element.tag.edn
      captures:
        1: keyword.operator.macro.edn
        3: punctuation.definition.symbol.namespace.edn
      push:
        - meta_scope: meta.tagged-element.edn
        - match: '\n'
          pop: true
        - match: '(?=[^\s,;])'
          push:
            - meta_scope: meta.tagged-element.element.edn
            - include: forms
            - match: ''
              pop: 2

  qualified-map:
    - match: '(#)((:)({{keyword_namespace}}))'
      captures:
          1: keyword.operator.macro.edn
          2: constant.other.keyword.unqualified.edn
          3: punctuation.definition.keyword.edn
          4: meta.namespace.edn
      push:
        - match: '/{{symbol}}?'
          scope: invalid.illegal.edn
          pop: true
        - match: ''
          pop: true


  # S-expressions

  sexp:
    - include: list
    - include: vector
    - include: map
    - include: set

  comma:
    - match: ','
      scope: punctuation.comma.edn comment.punctuation.comma.edn

  end-bracket:
    - match: '\]'
      scope: punctuation.section.brackets.end.edn
      pop: true

  end-brace:
    - match: \}
      scope: punctuation.section.braces.end.edn
      pop: true

  end-paren:
    - match: '\)'
      scope: punctuation.section.parens.end.edn
      pop: true

  # List

  list:
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
      - meta_scope: meta.sexp.list.edn
      - include: end-paren
      - include: main

  # Vector

  vector:
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
      - meta_scope: meta.sexp.vector.edn
      - include: end-bracket
      - include: main

  # Map

  map:
    - match: '\{'
      scope: punctuation.section.braces.begin.edn
      push:
        - meta_scope: meta.sexp.map.edn
        - match: '[\]\)]'
          scope: invalid.illegal.stray-bracket-end.edn
        - include: end-brace
        - match: '(?=[^\s,;])'
          push:
            - meta_content_scope: meta.mapping.key.edn
            - include: forms
            - match: ''
              set:
                - match: '(?=[^\s,;])'
                  set:
                    - meta_include_prototype: false
                    - meta_content_scope: meta.mapping.value.edn
                    - match: ','
                      scope: punctuation.comma.edn comment.punctuation.comma.edn
                      pop: 1
                    - include: forms
                    - match: ''
                      pop: 1

  # Set

  set:
    - match: '(#)({)'
      captures:
        1: keyword.operator.macro.edn
        2: punctuation.section.braces.begin.edn
      push:
      - meta_scope: meta.sexp.set.edn
      - include: end-brace
      - include: main

  stray-brackets:
    - match: '[\]\)\}]'
      scope: invalid.illegal.stray-bracket-end.edn

  fallback:
    - match: '[^\s,;\(\)\[\]{}\"`~@\^\\]+'
