%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
name: EDN (Tutkain)
file_extensions: [edn]
scope: source.edn

variables:
  whitespace: '(?:\s|(,))*'
  end_chars: '\s,()\[\]{}";'
  end: '(?=$|[{{end_chars}}])'
  number_end: '(?=$|[{{end_chars}}''`#])'
  non_symbol_chars: \s,;\(\)\[\]{}\"`~@\^\\\/
  symbol_head: '(?:\+(?!\d)|-(?!\d)|\.|[^{{non_symbol_chars}}:#''\d+-\.])'
  symbol: '(?:/|{{symbol_head}}[^{{non_symbol_chars}}]*)'
  qualified_symbol: '(?:/|{{symbol}}|({{symbol}})(/)({{symbol}})*){{end}}'
  keyword_namespace: '[^{{non_symbol_chars}}:/]*'
  keyword: '[[^{{non_symbol_chars}}:]|/][[^{{non_symbol_chars}}:]/:]*'
  constant: '(nil|true|false){{end}}'
  regexp_name: '[a-zA-Z][a-zA-Z0-9]*'
  sign: '[-+]?'
  exponent: (?:[eE]{{sign}}\d+)

contexts:
  main:
    - include: stray-brackets
    - include: forms

  # https://clojure.org/reference/reader
  forms:
    - include: constant

    # Literals
    - include: string
    - include: numbers
    - include: symbolic
    - include: keywords

    # Macro characters
    - include: macro_characters

    # S-expressions
    - include: sexp

    # Comma
    - include: comma

    # Symbols
    - include: symbol

    # Fallback?
    - match: '[^\s,;\(\)\[\]{}\"`~@\^\\]+'

  # Constants

  constant:
    - match: '{{constant}}'
      scope: meta.reader-form.edn constant.language.edn

  # Symbols

  symbol:
    - match: '{{qualified_symbol}}'
      scope: meta.reader-form.edn meta.symbol.edn
      captures:
        1: meta.namespace.edn
        2: punctuation.accessor.edn

  # Literals

  string:
    - match: '"'
      scope: punctuation.definition.string.begin.edn
      push:
      - meta_scope: meta.reader-form.edn string.quoted.double.edn
      - match: '(\\)(u\h{4}|b|t|n|f|r|"|''|\\|[0-3]?[0-7]{1,2})|((\\).)'
        scope: constant.character.escape.edn
        captures:
          1: punctuation.definition.character.escape.begin.edn
          3: invalid.illegal.escape.string.edn
          4: punctuation.definition.character.escape.begin.edn
      - match: '"'
        scope: punctuation.definition.string.end.edn
        pop: true

  numbers:
    - include: deprecated
    - include: integer_with_radix
    - include: hex_integer
    - include: decimal_integer
    - include: float
    - include: ratio

  deprecated:
    - match: '[-+]?0\d+N?{{number_end}}'
      scope: meta.reader-form.edn invalid.deprecated.edn
      pop: true

  integer_with_radix:
    - match: '([-+]?)((?:[2-9]|[1-9]\d+)[Rr])[0-9A-Za-z]+{{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.other.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.definition.numeric.base.edn

  hex_integer:
    - match: '({{sign}})(0[Xx])\h+(N?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.hexadecimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.definition.numeric.base.edn
        3: storage.type.numeric.edn

  decimal_integer:
    - match: '({{sign}})\d+(N?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.integer.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: storage.type.numeric.edn

  float:
    - match: '({{sign}})(?:0|[1-9][0-9]*)(?:(M)|(\.)[0-9]*(M)?|[eE][+-]?[0-9]+(M)?|(\.)[0-9]*[eE][+-]?[0-9]+(M)?){{number_end}}'
      scope: meta.reader-form.edn constant.numeric.float.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: storage.type.numeric.edn
        3: punctuation.separator.decimal.edn
        4: storage.type.numeric.edn
        5: storage.type.numeric.edn
        6: punctuation.separator.decimal.edn
        7: storage.type.numeric.edn

  ratio:
    - match: '({{sign}})\d+(/)\d+{{number_end}}'
      scope: meta.reader-form.edn constant.numeric.rational.decimal.edn
      captures:
        1: punctuation.definition.numeric.sign.edn
        2: punctuation.separator.rational.edn

  symbolic:
    - match: '((##)(Inf)|(##)(-Inf)|(##)(NaN))'
      captures:
        1: meta.reader-form.edn
        2: keyword.operator.macro.edn
        3: constant.other.symbolic.edn
        4: keyword.operator.macro.edn
        5: constant.other.symbolic.edn
        6: keyword.operator.macro.edn
        7: constant.other.symbolic.edn

  keywords:
    - include: qualified_keyword
    - include: unqualified_keyword

  qualified_keyword:
    - match: '(:)([^{{non_symbol_chars}}:]*)(/)({{keyword}})?{{end}}'
      scope: meta.reader-form.edn constant.other.keyword.qualified.edn
      captures:
        1: punctuation.definition.keyword.edn
        2: meta.namespace.edn
        3: punctuation.definition.constant.namespace.edn

  unqualified_keyword:
    - match: '(:)(?:/|[^{{non_symbol_chars}}:][[^{{non_symbol_chars}}:]:]*)(?=$|[{{end_chars}}''`#])'
      scope: meta.reader-form.edn constant.other.keyword.unqualified.edn
      captures:
        1: punctuation.definition.keyword.edn

  # Macro characters

  macro_characters:
    - include: character
    - include: comment
    - include: dispatch

  character:
    - match: '(?<=^|[\s,()\[\]{}"]|#_)((\\)(u\h{4}|o[0-3]?[0-7]{1,2}|newline|tab|space|backspace|formfeed|return|[^\s]){{end}}|((\\)[^\s,()\[\]{}";]*))'
      scope: meta.reader-form.edn constant.character.edn
      captures:
        2: punctuation.definition.character.begin.edn
        4: invalid.illegal.character.edn
        5: punctuation.definition.character.begin.edn

  comment:
    - match: '(;+|#!)(.|\s)*'
      scope: comment.line.edn
      captures:
        1: punctuation.definition.comment.edn

  dispatch:
    - include: discard
    - include: regexp
    - include: tagged-literal
    - include: qualified-map

  # Dispatch

  discard:
    - match: '((#)_)'
      captures:
        1: punctuation.definition.comment.edn
        2: keyword.operator.macro.edn
      push:
        - meta_scope: comment.block.edn comment.discard.edn
        - include: forms
        - match: ''
          pop: true

  regexp_quote:
    - match: '\\Q'
      scope: punctuation.section.quotation.begin.edn
      push:
        - meta_content_scope: constant.character.escape.regexp
        - match: '\\"'
        - match: '(?=")'
          pop: true
        - match: '\\E'
          scope: punctuation.section.quotation.end.edn
          pop: true

  regexp_shared:
    - match: '(\\)(\\|0[0-3]?[0-7]{1,2}|x\h{2}|u\h{4}|x\{1?\h{1,5}\}|\N\{[a-zA-Z0-9\- ]+\}|[tnrfae]|c[A-Z]|[dDhHsSvVwW]|p\{[a-zA-Z]+\}|b\{g\}|[bBAGZz]|[RX]|[0-9]+|k<{{regexp_name}}>|[^a-zA-Z0-9])|((\\).)'
      scope: constant.character.escape.regexp
      captures:
          1: punctuation.definition.character.escape.begin.edn
          3: invalid.illegal.escape.regexp.edn
          4: punctuation.definition.character.escape.begin.edn
    - match: '"'
      scope: punctuation.definition.string.end.edn
      pop: true
    - match: '(\[)(\^)?(-)?'
      captures:
        1: punctuation.section.brackets.begin.edn
        2: keyword.operator.negation.regexp.edn
      push:
      - match: '(?=")'
        pop:   true
      - match: '\]'
        scope: punctuation.section.brackets.end.edn
        pop: true
      - match: '-(?!\])'
        scope: keyword.operator.range.regexp.edn
      - match: '&&'
        scope: keyword.operator.intersection.regexp.edn
      - include: regexp_shared
    - match: '(?:[?*+]|\{\d+(?:,(?:\d+)?)?\})[?+]?'
      scope: keyword.operator.quantifier.regexp.edn

  regexp_group:
    - include: regexp_quote
    - include: regexp_shared
    - match: '\|'
      scope: keyword.operator.union.regexp.edn
    - match: '(\()(\?(<{{regexp_name}}>|:|=|!|<=|<!|>|[idmsux]*(-[idmsux]+)?:|[idmsuxU]*(-[idmsuxU]+)?(?!:)))?'
      captures:
        1: punctuation.section.parens.begin.edn
        2: keyword.operator.special.regexp.edn
      push:
      - match: '(?=")'
        pop:   true
      - match: '\)'
        scope: punctuation.section.parens.end.edn
        pop: true
      - include: regexp_group
    - match: '[\)]'
      scope: invalid.illegal.stray-bracket-end.edn

  regexp:
    - match: '(#)"'
      scope: punctuation.definition.string.begin.edn
      captures:
        1: keyword.operator.macro.edn
      push:
      - meta_scope: meta.reader-form.edn string.regexp.edn
      - include: regexp_group

  tagged-literal:
    - match: '((#\s*inst)\s*((")\d\d\d\d(?:-[01]\d(?:-[0123]\d(?:T[012]\d(?::[012345]\d(?::[0123456]\d(?:[.]\d{1,9})?)?)?)?)?)?(?:Z|[-+][012]\d:[012345]\d)?("))|(#inst\s*"[^"]*")){{end}}'
      scope: meta.reader-form.edn constant.other.instant.edn
      captures:
        2: keyword.operator.macro.edn
        3: string.quoted.double.edn
        4: punctuation.definition.string.begin.edn
        5: punctuation.definition.string.end.edn
        6: invalid.illegal.instant.edn
    - match: '((#\s*uuid)\s*((")\h{8}-\h{4}-\h{4}-\h{4}-\h{12}("))|(#uuid\s*"[^"]*")){{end}}'
      scope: meta.reader-form.edn constant.other.uuid.edn
      captures:
        2: keyword.operator.macro.edn
        3: string.quoted.double.edn
        4: punctuation.definition.string.begin.edn
        5: punctuation.definition.string.end.edn
        6: invalid.illegal.uuid.edn
    - match: '(#{{qualified_symbol}}){{end}}'
      scope: meta.reader-form.edn
      captures:
        1: keyword.operator.macro.edn
        3: punctuation.definition.symbol.namespace.edn

  qualified-map:
    - match: '(#)(?=:)'
      captures:
          1: keyword.operator.macro.edn

  # S-expressions

  sexp:
    - include: list
    - include: vector
    - include: map
    - include: set

  comma:
    - match: ','
      scope: punctuation.comma.edn comment.punctuation.comma.edn

  # List

  list:
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
      - match: '\)'
        scope: punctuation.section.parens.end.edn
        pop: true
      - include: main

  # Vector

  vector:
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
      - match: '\]'
        scope: punctuation.section.brackets.end.edn
        pop: true
      - include: main

  # Map

  map:
    - match: '\{'
      scope: punctuation.section.braces.begin.edn
      push:
      - match: \}
        scope: punctuation.section.braces.end.edn
        pop: true
      - include: main

  # Set

  set:
    - match: '(#)({)'
      captures:
        1: keyword.operator.macro.edn
        2: punctuation.section.braces.begin.edn
      push:
      - match: \}
        scope: punctuation.section.braces.end.edn
        pop: true
      - include: main

  stray-brackets:
    - match: '[\]\)\}]'
      scope: invalid.illegal.stray-bracket-end.edn
