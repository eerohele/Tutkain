%YAML 1.2
---
# https://www.sublimetext.com/docs/syntax.html
name: Clojure (Tutkain)
file_extensions: [clj]
scope: source.clojure
extends: Packages/Tutkain/EDN (Tutkain).sublime-syntax

contexts:
  keywords:
    - include: auto_qualified_keyword
    - include: qualified_keyword
    - include: unqualified_keyword

  auto_qualified_keyword:
    - match: '(::)(?=[^:])({{keyword_namespace}})((/)({{keyword}})?)?'
      scope: meta.reader-form.clojure constant.other.keyword.auto-qualified.clojure
      captures:
        1: punctuation.definition.keyword.clojure
        2: meta.namespace.clojure
        4: punctuation.definition.constant.namespace.clojure

  macro_characters:
    - include: quote
    - include: character
    - include: comment
    - include: deref
    - include: metadata
    - include: dispatch
    - include: syntax-quote

  quote:
    - match: '(''){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  deref:
    - match: '(@){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  metadata:
    - match: '(\^){{whitespace}}'
      scope: keyword.operator.macro.clojure
      push:
        - include: map
        - include: keywords
        - include: symbol
        - include: string
        - match: ''
          pop: true

  dispatch:
    - include: discard
    - include: regexp
    - include: var-quote
    - include: anonymous-function-literal
    - include: reader-conditional
    - include: tagged-literal
    - include: qualified-map

  # Dispatch

  var-quote:
    - match: '(#''){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  anonymous-function-literal:
    - match: '(#)(?=\()'
      captures:
        1: keyword.operator.macro.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  reader-conditional:
    - match: '(#\?@?){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  syntax-quote:
    - match: '(~@?){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
        2: punctuation.definition.comma.clojure
      push:
        - include: forms
        - match: ''
          pop: true
    - match: '(`){{whitespace}}'
      captures:
        1: keyword.operator.macro.clojure
        2: punctuation.definition.comma.clojure
      push:
        - include: forms
        - match: ''
          pop: true

  # S-expressions

  sexp:
    - include: list
    - include: vector
    - include: map
    - include: set

  # List

  list:
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push: list-head

  list-head:
    - include: list-end
    - include: metadata
    - include: comment
    - include: special-forms
    - match: '(in-ns){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.namespace.clojure
      push:
        - include: list-end
        - match: '('')({{symbol}})'
          captures:
            1: keyword.operator.macro.clojure
            2: meta.reader-form.clojure meta.symbol.clojure entity.name.namespace.clojure
          pop: true
    - match: '(ns){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.namespace.clojure
      set:
        - match: '{{symbol}}'
          scope: meta.reader-form.clojure meta.symbol.clojure entity.name.namespace.clojure
          set: ns-tail
        - include: list-tail
    - match: 'defmulti{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.function.clojure
      set: defmulti-tail
    - match: 'defmethod{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.function.clojure
      set: defmethod-tail
    - match: '(defrecord|deftype){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure storage.type.class.clojure
      set: classdef-tail
    - match: '(defprotocol|definterface){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure storage.type.interface.clojure
      set: typedef-tail
    - match: 'declare{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.variable.clojure
      set: declare-tail
    - match: 'defonce{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.variable.clojure
      set: def-tail
    - match: 'defn(-?){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.function.clojure
      set: fn-tail
    - match: 'defmacro{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.declaration.macro.clojure
      set: fn-tail
    - match: '((?:.+?/)?(deftest|defspec)){{end}}'
      captures:
        1: meta.reader-form.clojure meta.symbol.clojure meta.deftest.clojure keyword.declaration.function.clojure
      set: deftest-tail
    - match: '(?:reify|extend-protocol|extend-type){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.function-call.clojure variable.function.clojure
      set: class-specs
    - match: '(?:proxy){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.function-call.clojure variable.function.clojure
      set: proxy-tail
    - match: '(?=\S)'
      set:
        - match: '{{constant}}'
          scope: constant.language.edn
          set: list-tail
        - match: '{{qualified_symbol}}'
          captures:
            1: meta.namespace.clojure
            2: punctuation.accessor.clojure
          scope: meta.reader-form.clojure meta.symbol.clojure meta.function-call.clojure variable.function.clojure
          set: list-tail
        - match: (?=\S)
          set: list-tail
        - include: list-tail

  let-tail:
    - match: '\)'
      scope: punctuation.section.parens.end.edn
      pop: 2
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
      - meta_scope: meta.binding-vector.clojure
      - match: '\]'
        scope: punctuation.section.brackets.end.edn
        pop: 2
      - include: forms
    - include: main

  special-forms:
    - match: '\.{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'new{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'set!{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'def{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.declaration.variable.clojure
      set: def-tail
    - match: 'if{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.control.conditional.if.clojure
      set: list-tail
    - match: 'do{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'let\*?{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.declaration.variable.clojure
      push: let-tail
    - match: 'quote{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'var{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail
    - match: 'fn\*?{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.declaration.function.inline.clojure
      set: fn-tail
    - match: 'loop{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.control.loop.clojure
      set: list-tail
    - match: 'recur{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.control.flow.recur.clojure
      set: list-tail
    - match: 'throw{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.control.flow.throw.clojure
      set: list-tail
    - match: 'try{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.control.exception.try.clojure
      set: list-tail
    - match: 'catch{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.control.exception.catch.clojure
      set: list-tail
    - match: 'finally{{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure keyword.control.exception.finally.clojure
      set: list-tail
    - match: '(monitor-enter|monitor-exit){{end}}'
      scope: meta.reader-form.clojure meta.symbol.clojure meta.special-form.clojure keyword.other.clojure
      set: list-tail

  require-list:
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
        - include: list-end
        - include: metadata
        - include: comment
        - include: symbol
        - include: keywords

  ns-tail:
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
      - include: list-end
      - match: '(:)(require|refer-clojure|use){{end}}'
        captures:
          1: punctuation.definition.keyword.clojure
        scope: meta.reader-form.clojure meta.statement.require.clojure constant.other.keyword.unqualified.clojure
        set:
          - include: list-end
          - include: metadata
          - include: comment
          - include: vector
          - include: require-list
          - include: reader-conditional
          - include: symbol
          - include: discard
          - include: unqualified_keyword
      - match: '(:)import{{end}}'
        captures:
          1: punctuation.definition.keyword.clojure
        scope: meta.reader-form.clojure meta.statement.import.clojure constant.other.keyword.unqualified.clojure
        set:
          - include: list-end
          - include: metadata
          - include: comment
          - include: vector
          - include: require-list
          - include: reader-conditional
          - include: symbol
          - include: discard
          - include: unqualified_keyword
      - include: list-tail
    - include: list-tail

  fn-params-2:
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
        - meta_scope: meta.function.parameters.clojure
        - match: '\]'
          scope: punctuation.section.brackets.end.edn
          set:
            - match: '\)'
              scope: punctuation.section.parens.end.edn
              pop: 2
            - include: main
        - include: main

  fn-params-3:
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
        - meta_scope: meta.function.parameters.clojure
        - match: '\]'
          scope: punctuation.section.brackets.end.edn
          set:
            - match: '\)'
              scope: punctuation.section.parens.end.edn
              pop: 2
            - include: main
        - include: main

  anonymous-fn-body:
    - include: comment
    - include: string
    - include: map
    - include: fn-params-2
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
        - include: list-end
        - include: comment
        - include: metadata
        - match: '\['
          scope: punctuation.section.brackets.begin.edn
          push:
            - meta_scope: meta.function.parameters.clojure
            - match: '\]'
              scope: punctuation.section.brackets.end.edn
              set:
                - match: '\)'
                  scope: punctuation.section.parens.end.edn
                  pop: 2
                - include: main
            - include: main

  fn-arity:
    - meta_scope: meta.function-body.clojure
    - include: list-end
    - include: comment
    - include: metadata
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
        - meta_scope: meta.function.parameters.clojure
        - match: '\]'
          scope: punctuation.section.brackets.end.edn
          set:
            - match: '\)'
              scope: punctuation.section.parens.end.edn
              pop: 2
            - include: main
        - include: main

  named-fn-body:
    - include: list-end
    # FIXME: This is stupid.
    - include: comment
    - include: constant
    - include: string
    - include: reader-conditional
    - include: map
    - include: symbol
    - include: macro_characters
    - include: numbers
    - include: keywords
    - include: symbolic
    - include: comma
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push: fn-arity
    - include: fn-params-3

  fn-tail:
    - include: list-end
    - include: metadata
    - include: comment
    - include: quote
    - include: syntax-quote
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure
      set: named-fn-body
    - include: anonymous-fn-body

  defmulti-tail:
    - match: '{{qualified_symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure
      set: list-tail
    - include: list-tail

  defmethod-tail:
    - include: list-end
    - include: comment
    - include: metadata
    - include: discard
    - match: '{{qualified_symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure
      push:
        - match: '\)'
          scope: punctuation.section.parens.end.edn
          pop: 2
        - match: '(?=\S)'
          set:
          - match: '\)'
            scope: punctuation.section.parens.end.edn
            pop: 2
          - include: main
          - match: ''
            set:
              - include: comment
              - include: metadata
              - include: reader-conditional
              - match: '\)'
                scope: punctuation.section.parens.end.edn
                pop: 2
              - match: '\['
                scope: punctuation.section.brackets.begin.edn
                push:
                  - meta_scope: meta.function.parameters.clojure
                  - match: '\]'
                    scope: punctuation.section.brackets.end.edn
                    set:
                      - match: '\)'
                        scope: punctuation.section.parens.end.edn
                        pop: 3
                      - include: main
                  - include: main

  proxy-tail:
    - include: comment
    - include: metadata
    - include: list-end
    - match: '\['
      scope: punctuation.section.brackets.begin.edn
      push:
      - include: comment
      - match: '\]'
        scope: punctuation.section.brackets.end.edn
        set:
          - match: '\['
            scope: punctuation.section.brackets.begin.edn
            push:
            - meta_scope: meta.function.parameters.clojure
            - match: '\]'
              scope: punctuation.section.brackets.end.edn
              pop: 2
            - include: main
      - match: '{{qualified_symbol}}'
        scope: meta.reader-form.clojure meta.symbol.clojure entity.other.inherited-class.clojure
    - include: class-specs

  class-specs:
    - include: comment
    - include: list-end
    - include: discard
    - match: '{{qualified_symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.other.inherited-class.clojure
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      push:
        - match: '\)'
          scope: punctuation.section.parens.end.edn
          pop: true
        - include: constant
        - match: '{{symbol}}'
          scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure
          push:
          - match: '\)'
            scope: punctuation.section.parens.end.edn
            pop: 2
          - match: '\('
            scope: punctuation.section.parens.begin.edn
            push:
              - include: list-end
              - include: comment
              - include: metadata
              - match: '\['
                scope: punctuation.section.brackets.begin.edn
                push:
                  - meta_scope: meta.function.parameters.clojure
                  - match: '\]'
                    scope: punctuation.section.brackets.end.edn
                    set:
                      - match: '\)'
                        scope: punctuation.section.parens.end.edn
                        pop: 2
                      - include: main
                  - include: main
          - match: '\['
            scope: punctuation.section.brackets.begin.edn
            set:
            - meta_scope: meta.function.parameters.clojure
            - match: '\]'
              scope: punctuation.section.brackets.end.edn
              set:
                - match: '\)'
                  scope: punctuation.section.parens.end.edn
                  pop: 2
                - include: main
            - include: main
          - include: main

  classdef-tail:
    - include: metadata
    - include: comment
    - include: discard
    - include: list-end
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.type.clojure
      set:
        - include: list-end
        - include: comment
        - match: '\['
          scope: punctuation.section.brackets.begin.edn
          set:
          - include: forms
          - meta_scope: meta.function.parameters.clojure
          - match: '\]'
            scope: punctuation.section.brackets.end.edn
            set: class-specs

  interface-specs:
    - include: comment
    - include: string
    - match: '\('
      scope: punctuation.section.parens.begin.edn
      set:
        - match: '\)'
          scope: punctuation.section.parens.end.edn
          set: interface-specs
        - include: metadata
        - match: '{{symbol}}'
          scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure
          set:
          - match: '\['
            scope: punctuation.section.brackets.begin.edn
            set:
            - meta_scope: meta.function.parameters.clojure
            - match: '\]'
              scope: punctuation.section.brackets.end.edn
              pop: true
              set:
                - include: string
                - include: comment
                - match: '\)'
                  scope: punctuation.section.parens.end.edn
                  set: interface-specs
            - include: main
    - include: list-tail

  typedef-tail:
    - include: list-end
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.type.clojure
      set:
        - match: \)
          scope: punctuation.section.parens.end.edn
          pop: true
        - include: interface-specs
        - include: list-tail
    - include: list-tail

  def-tail:
    - match: '{{constant}}'
      scope: constant.language.edn
      set: list-tail
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.constant.clojure
      set: list-tail
    - include: list-tail

  declare-tail:
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.forward-decl.clojure
    - include: list-tail

  deftest-tail:
    - match: '{{symbol}}'
      scope: meta.reader-form.clojure meta.symbol.clojure entity.name.function.clojure meta.test-var.clojure
      set: list-tail
    - include: list-tail

  list-tail:
    - include: list-end
    - include: main

  list-end:
    - match: '\)'
      scope: punctuation.section.parens.end.edn
      pop: true
